"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AXIOM_RULE_NAME () {
        return AXIOM_RULE_NAME;
    },
    get COMBINATOR_DECLARATION_RULE_NAME () {
        return COMBINATOR_DECLARATION_RULE_NAME;
    },
    get COMBINATOR_RULE_NAME () {
        return COMBINATOR_RULE_NAME;
    },
    get COMPLEX_TYPE_DECLARATION_RULE_NAME () {
        return COMPLEX_TYPE_DECLARATION_RULE_NAME;
    },
    get CONCLUSION_RULE_NAME () {
        return CONCLUSION_RULE_NAME;
    },
    get CONJECTURE_RULE_NAME () {
        return CONJECTURE_RULE_NAME;
    },
    get CONSTRUCTOR_DECLARATION_RULE_NAME () {
        return CONSTRUCTOR_DECLARATION_RULE_NAME;
    },
    get CONSTRUCTOR_RULE_NAME () {
        return CONSTRUCTOR_RULE_NAME;
    },
    get CONTAINED_ASSERTION_RULE_NAME () {
        return CONTAINED_ASSERTION_RULE_NAME;
    },
    get DECLARATION_RULE_NAME () {
        return DECLARATION_RULE_NAME;
    },
    get DEDUCTION_RULE_NAME () {
        return DEDUCTION_RULE_NAME;
    },
    get DEFINED_ASSERTION_RULE_NAME () {
        return DEFINED_ASSERTION_RULE_NAME;
    },
    get DERIVATION_RULE_NAME () {
        return DERIVATION_RULE_NAME;
    },
    get EQUALITY_RULE_NAME () {
        return EQUALITY_RULE_NAME;
    },
    get ERROR_RULE_NAME () {
        return ERROR_RULE_NAME;
    },
    get FRAME_RULE_NAME () {
        return FRAME_RULE_NAME;
    },
    get JUDGEMENT_RULE_NAME () {
        return JUDGEMENT_RULE_NAME;
    },
    get LABEL_RULE_NAME () {
        return LABEL_RULE_NAME;
    },
    get LEMMA_RULE_NAME () {
        return LEMMA_RULE_NAME;
    },
    get METATHEOREM_RULE_NAME () {
        return METATHEOREM_RULE_NAME;
    },
    get METAVARIABLE_DECLARATION_RULE_NAME () {
        return METAVARIABLE_DECLARATION_RULE_NAME;
    },
    get METAVARIABLE_RULE_NAME () {
        return METAVARIABLE_RULE_NAME;
    },
    get META_LEMMA_RULE_NAME () {
        return META_LEMMA_RULE_NAME;
    },
    get META_TYPE_RULE_NAME () {
        return META_TYPE_RULE_NAME;
    },
    get PARAMETER_RULE_NAME () {
        return PARAMETER_RULE_NAME;
    },
    get PREMISE_RULE_NAME () {
        return PREMISE_RULE_NAME;
    },
    get PROCEDURE_CALL_RULE_NAME () {
        return PROCEDURE_CALL_RULE_NAME;
    },
    get PROOF_RULE_NAME () {
        return PROOF_RULE_NAME;
    },
    get PROPERTY_ASSERTION_RULE_NAME () {
        return PROPERTY_ASSERTION_RULE_NAME;
    },
    get PROPERTY_DECLARATION_RULE_NAME () {
        return PROPERTY_DECLARATION_RULE_NAME;
    },
    get PROPERTY_RELATION_RULE_NAME () {
        return PROPERTY_RELATION_RULE_NAME;
    },
    get PROPERTY_RULE_NAME () {
        return PROPERTY_RULE_NAME;
    },
    get REFERENCE_RULE_NAME () {
        return REFERENCE_RULE_NAME;
    },
    get RULE_RULE_NAME () {
        return RULE_RULE_NAME;
    },
    get SATISFIES_ASSERTION_RULE_NAME () {
        return SATISFIES_ASSERTION_RULE_NAME;
    },
    get STATEMENT_RULE_NAME () {
        return STATEMENT_RULE_NAME;
    },
    get STEP_RULE_NAME () {
        return STEP_RULE_NAME;
    },
    get SUBPROOF_ASSERTION_RULE_NAME () {
        return SUBPROOF_ASSERTION_RULE_NAME;
    },
    get SUBPROOF_RULE_NAME () {
        return SUBPROOF_RULE_NAME;
    },
    get SUB_DERIVATION_RULE_NAME () {
        return SUB_DERIVATION_RULE_NAME;
    },
    get SUPPOSITION_RULE_NAME () {
        return SUPPOSITION_RULE_NAME;
    },
    get TERM_RULE_NAME () {
        return TERM_RULE_NAME;
    },
    get THEOREM_RULE_NAME () {
        return THEOREM_RULE_NAME;
    },
    get TYPE_ASSERTION_RULE_NAME () {
        return TYPE_ASSERTION_RULE_NAME;
    },
    get TYPE_DECLARATION_RULE_NAME () {
        return TYPE_DECLARATION_RULE_NAME;
    },
    get TYPE_RULE_NAME () {
        return TYPE_RULE_NAME;
    },
    get VARIABLE_DECLARATION_RULE_NAME () {
        return VARIABLE_DECLARATION_RULE_NAME;
    },
    get VARIABLE_RULE_NAME () {
        return VARIABLE_RULE_NAME;
    }
});
var RULE_RULE_NAME = "rule";
var STEP_RULE_NAME = "step";
var TERM_RULE_NAME = "term";
var TYPE_RULE_NAME = "type";
var LABEL_RULE_NAME = "label";
var LEMMA_RULE_NAME = "lemma";
var AXIOM_RULE_NAME = "axiom";
var ERROR_RULE_NAME = "error";
var FRAME_RULE_NAME = "frame";
var PROOF_RULE_NAME = "proof";
var THEOREM_RULE_NAME = "theorem";
var PREMISE_RULE_NAME = "premise";
var PROPERTY_RULE_NAME = "property";
var EQUALITY_RULE_NAME = "equality";
var VARIABLE_RULE_NAME = "variable";
var SUBPROOF_RULE_NAME = "subproof";
var META_TYPE_RULE_NAME = "metaType";
var PARAMETER_RULE_NAME = "parameter";
var DEDUCTION_RULE_NAME = "deduction";
var JUDGEMENT_RULE_NAME = "judgement";
var REFERENCE_RULE_NAME = "reference";
var STATEMENT_RULE_NAME = "statement";
var META_LEMMA_RULE_NAME = "metaLemma";
var COMBINATOR_RULE_NAME = "combinator";
var CONCLUSION_RULE_NAME = "conclusion";
var CONJECTURE_RULE_NAME = "conjecture";
var DERIVATION_RULE_NAME = "derivation";
var SUPPOSITION_RULE_NAME = "supposition";
var CONSTRUCTOR_RULE_NAME = "constructor";
var DECLARATION_RULE_NAME = "declaration";
var METATHEOREM_RULE_NAME = "metatheorem";
var METAVARIABLE_RULE_NAME = "metavariable";
var PROCEDURE_CALL_RULE_NAME = "procedureCall";
var SUB_DERIVATION_RULE_NAME = "subDerivation";
var TYPE_ASSERTION_RULE_NAME = "typeAssertion";
var TYPE_DECLARATION_RULE_NAME = "typeDeclaration";
var PROPERTY_RELATION_RULE_NAME = "propertyRelation";
var DEFINED_ASSERTION_RULE_NAME = "definedAssertion";
var PROPERTY_ASSERTION_RULE_NAME = "propertyAssertion";
var SUBPROOF_ASSERTION_RULE_NAME = "subproofAssertion";
var CONTAINED_ASSERTION_RULE_NAME = "containedAssertion";
var SATISFIES_ASSERTION_RULE_NAME = "satisfiesAssertion";
var PROPERTY_DECLARATION_RULE_NAME = "propertyDeclaration";
var VARIABLE_DECLARATION_RULE_NAME = "variableDeclaration";
var COMBINATOR_DECLARATION_RULE_NAME = "combinatorDeclaration";
var CONSTRUCTOR_DECLARATION_RULE_NAME = "constructorDeclaration";
var COMPLEX_TYPE_DECLARATION_RULE_NAME = "complexTypeDeclaration";
var METAVARIABLE_DECLARATION_RULE_NAME = "metavariableDeclaration";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ydWxlTmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBjb25zdCBSVUxFX1JVTEVfTkFNRSA9IFwicnVsZVwiO1xuZXhwb3J0IGNvbnN0IFNURVBfUlVMRV9OQU1FID0gXCJzdGVwXCI7XG5leHBvcnQgY29uc3QgVEVSTV9SVUxFX05BTUUgPSBcInRlcm1cIjtcbmV4cG9ydCBjb25zdCBUWVBFX1JVTEVfTkFNRSA9IFwidHlwZVwiO1xuZXhwb3J0IGNvbnN0IExBQkVMX1JVTEVfTkFNRSA9IFwibGFiZWxcIjtcbmV4cG9ydCBjb25zdCBMRU1NQV9SVUxFX05BTUUgPSBcImxlbW1hXCI7XG5leHBvcnQgY29uc3QgQVhJT01fUlVMRV9OQU1FID0gXCJheGlvbVwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX1JVTEVfTkFNRSA9IFwiZXJyb3JcIjtcbmV4cG9ydCBjb25zdCBGUkFNRV9SVUxFX05BTUUgPSBcImZyYW1lXCI7XG5leHBvcnQgY29uc3QgUFJPT0ZfUlVMRV9OQU1FID0gXCJwcm9vZlwiO1xuZXhwb3J0IGNvbnN0IFRIRU9SRU1fUlVMRV9OQU1FID0gXCJ0aGVvcmVtXCI7XG5leHBvcnQgY29uc3QgUFJFTUlTRV9SVUxFX05BTUUgPSBcInByZW1pc2VcIjtcbmV4cG9ydCBjb25zdCBQUk9QRVJUWV9SVUxFX05BTUUgPSBcInByb3BlcnR5XCI7XG5leHBvcnQgY29uc3QgRVFVQUxJVFlfUlVMRV9OQU1FID0gXCJlcXVhbGl0eVwiO1xuZXhwb3J0IGNvbnN0IFZBUklBQkxFX1JVTEVfTkFNRSA9IFwidmFyaWFibGVcIjtcbmV4cG9ydCBjb25zdCBTVUJQUk9PRl9SVUxFX05BTUUgPSBcInN1YnByb29mXCI7XG5leHBvcnQgY29uc3QgTUVUQV9UWVBFX1JVTEVfTkFNRSA9IFwibWV0YVR5cGVcIjtcbmV4cG9ydCBjb25zdCBQQVJBTUVURVJfUlVMRV9OQU1FID0gXCJwYXJhbWV0ZXJcIjtcbmV4cG9ydCBjb25zdCBERURVQ1RJT05fUlVMRV9OQU1FID0gXCJkZWR1Y3Rpb25cIjtcbmV4cG9ydCBjb25zdCBKVURHRU1FTlRfUlVMRV9OQU1FID0gXCJqdWRnZW1lbnRcIjtcbmV4cG9ydCBjb25zdCBSRUZFUkVOQ0VfUlVMRV9OQU1FID0gXCJyZWZlcmVuY2VcIjtcbmV4cG9ydCBjb25zdCBTVEFURU1FTlRfUlVMRV9OQU1FID0gXCJzdGF0ZW1lbnRcIjtcbmV4cG9ydCBjb25zdCBNRVRBX0xFTU1BX1JVTEVfTkFNRSA9IFwibWV0YUxlbW1hXCI7XG5leHBvcnQgY29uc3QgQ09NQklOQVRPUl9SVUxFX05BTUUgPSBcImNvbWJpbmF0b3JcIjtcbmV4cG9ydCBjb25zdCBDT05DTFVTSU9OX1JVTEVfTkFNRSA9IFwiY29uY2x1c2lvblwiO1xuZXhwb3J0IGNvbnN0IENPTkpFQ1RVUkVfUlVMRV9OQU1FID0gXCJjb25qZWN0dXJlXCI7XG5leHBvcnQgY29uc3QgREVSSVZBVElPTl9SVUxFX05BTUUgPSBcImRlcml2YXRpb25cIjtcbmV4cG9ydCBjb25zdCBTVVBQT1NJVElPTl9SVUxFX05BTUUgPSBcInN1cHBvc2l0aW9uXCI7XG5leHBvcnQgY29uc3QgQ09OU1RSVUNUT1JfUlVMRV9OQU1FID0gXCJjb25zdHJ1Y3RvclwiO1xuZXhwb3J0IGNvbnN0IERFQ0xBUkFUSU9OX1JVTEVfTkFNRSA9IFwiZGVjbGFyYXRpb25cIjtcbmV4cG9ydCBjb25zdCBNRVRBVEhFT1JFTV9SVUxFX05BTUUgPSBcIm1ldGF0aGVvcmVtXCI7XG5leHBvcnQgY29uc3QgTUVUQVZBUklBQkxFX1JVTEVfTkFNRSA9IFwibWV0YXZhcmlhYmxlXCI7XG5leHBvcnQgY29uc3QgUFJPQ0VEVVJFX0NBTExfUlVMRV9OQU1FID0gXCJwcm9jZWR1cmVDYWxsXCI7XG5leHBvcnQgY29uc3QgU1VCX0RFUklWQVRJT05fUlVMRV9OQU1FID0gXCJzdWJEZXJpdmF0aW9uXCI7XG5leHBvcnQgY29uc3QgVFlQRV9BU1NFUlRJT05fUlVMRV9OQU1FID0gXCJ0eXBlQXNzZXJ0aW9uXCI7XG5leHBvcnQgY29uc3QgVFlQRV9ERUNMQVJBVElPTl9SVUxFX05BTUUgPSBcInR5cGVEZWNsYXJhdGlvblwiO1xuZXhwb3J0IGNvbnN0IFBST1BFUlRZX1JFTEFUSU9OX1JVTEVfTkFNRSA9IFwicHJvcGVydHlSZWxhdGlvblwiO1xuZXhwb3J0IGNvbnN0IERFRklORURfQVNTRVJUSU9OX1JVTEVfTkFNRSA9IFwiZGVmaW5lZEFzc2VydGlvblwiO1xuZXhwb3J0IGNvbnN0IFBST1BFUlRZX0FTU0VSVElPTl9SVUxFX05BTUUgPSBcInByb3BlcnR5QXNzZXJ0aW9uXCI7XG5leHBvcnQgY29uc3QgU1VCUFJPT0ZfQVNTRVJUSU9OX1JVTEVfTkFNRSA9IFwic3VicHJvb2ZBc3NlcnRpb25cIjtcbmV4cG9ydCBjb25zdCBDT05UQUlORURfQVNTRVJUSU9OX1JVTEVfTkFNRSA9IFwiY29udGFpbmVkQXNzZXJ0aW9uXCI7XG5leHBvcnQgY29uc3QgU0FUSVNGSUVTX0FTU0VSVElPTl9SVUxFX05BTUUgPSBcInNhdGlzZmllc0Fzc2VydGlvblwiO1xuZXhwb3J0IGNvbnN0IFBST1BFUlRZX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSA9IFwicHJvcGVydHlEZWNsYXJhdGlvblwiO1xuZXhwb3J0IGNvbnN0IFZBUklBQkxFX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSA9IFwidmFyaWFibGVEZWNsYXJhdGlvblwiO1xuZXhwb3J0IGNvbnN0IENPTUJJTkFUT1JfREVDTEFSQVRJT05fUlVMRV9OQU1FID0gXCJjb21iaW5hdG9yRGVjbGFyYXRpb25cIjtcbmV4cG9ydCBjb25zdCBDT05TVFJVQ1RPUl9ERUNMQVJBVElPTl9SVUxFX05BTUUgPSBcImNvbnN0cnVjdG9yRGVjbGFyYXRpb25cIjtcbmV4cG9ydCBjb25zdCBDT01QTEVYX1RZUEVfREVDTEFSQVRJT05fUlVMRV9OQU1FID0gXCJjb21wbGV4VHlwZURlY2xhcmF0aW9uXCI7XG5leHBvcnQgY29uc3QgTUVUQVZBUklBQkxFX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSA9IFwibWV0YXZhcmlhYmxlRGVjbGFyYXRpb25cIjtcbiJdLCJuYW1lcyI6WyJBWElPTV9SVUxFX05BTUUiLCJDT01CSU5BVE9SX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSIsIkNPTUJJTkFUT1JfUlVMRV9OQU1FIiwiQ09NUExFWF9UWVBFX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSIsIkNPTkNMVVNJT05fUlVMRV9OQU1FIiwiQ09OSkVDVFVSRV9SVUxFX05BTUUiLCJDT05TVFJVQ1RPUl9ERUNMQVJBVElPTl9SVUxFX05BTUUiLCJDT05TVFJVQ1RPUl9SVUxFX05BTUUiLCJDT05UQUlORURfQVNTRVJUSU9OX1JVTEVfTkFNRSIsIkRFQ0xBUkFUSU9OX1JVTEVfTkFNRSIsIkRFRFVDVElPTl9SVUxFX05BTUUiLCJERUZJTkVEX0FTU0VSVElPTl9SVUxFX05BTUUiLCJERVJJVkFUSU9OX1JVTEVfTkFNRSIsIkVRVUFMSVRZX1JVTEVfTkFNRSIsIkVSUk9SX1JVTEVfTkFNRSIsIkZSQU1FX1JVTEVfTkFNRSIsIkpVREdFTUVOVF9SVUxFX05BTUUiLCJMQUJFTF9SVUxFX05BTUUiLCJMRU1NQV9SVUxFX05BTUUiLCJNRVRBVEhFT1JFTV9SVUxFX05BTUUiLCJNRVRBVkFSSUFCTEVfREVDTEFSQVRJT05fUlVMRV9OQU1FIiwiTUVUQVZBUklBQkxFX1JVTEVfTkFNRSIsIk1FVEFfTEVNTUFfUlVMRV9OQU1FIiwiTUVUQV9UWVBFX1JVTEVfTkFNRSIsIlBBUkFNRVRFUl9SVUxFX05BTUUiLCJQUkVNSVNFX1JVTEVfTkFNRSIsIlBST0NFRFVSRV9DQUxMX1JVTEVfTkFNRSIsIlBST09GX1JVTEVfTkFNRSIsIlBST1BFUlRZX0FTU0VSVElPTl9SVUxFX05BTUUiLCJQUk9QRVJUWV9ERUNMQVJBVElPTl9SVUxFX05BTUUiLCJQUk9QRVJUWV9SRUxBVElPTl9SVUxFX05BTUUiLCJQUk9QRVJUWV9SVUxFX05BTUUiLCJSRUZFUkVOQ0VfUlVMRV9OQU1FIiwiUlVMRV9SVUxFX05BTUUiLCJTQVRJU0ZJRVNfQVNTRVJUSU9OX1JVTEVfTkFNRSIsIlNUQVRFTUVOVF9SVUxFX05BTUUiLCJTVEVQX1JVTEVfTkFNRSIsIlNVQlBST09GX0FTU0VSVElPTl9SVUxFX05BTUUiLCJTVUJQUk9PRl9SVUxFX05BTUUiLCJTVUJfREVSSVZBVElPTl9SVUxFX05BTUUiLCJTVVBQT1NJVElPTl9SVUxFX05BTUUiLCJURVJNX1JVTEVfTkFNRSIsIlRIRU9SRU1fUlVMRV9OQU1FIiwiVFlQRV9BU1NFUlRJT05fUlVMRV9OQU1FIiwiVFlQRV9ERUNMQVJBVElPTl9SVUxFX05BTUUiLCJUWVBFX1JVTEVfTkFNRSIsIlZBUklBQkxFX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSIsIlZBUklBQkxFX1JVTEVfTkFNRSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O1FBUWFBO2VBQUFBOztRQXNDQUM7ZUFBQUE7O1FBckJBQztlQUFBQTs7UUF1QkFDO2VBQUFBOztRQXRCQUM7ZUFBQUE7O1FBQ0FDO2VBQUFBOztRQW9CQUM7ZUFBQUE7O1FBakJBQztlQUFBQTs7UUFZQUM7ZUFBQUE7O1FBWEFDO2VBQUFBOztRQVhBQztlQUFBQTs7UUFtQkFDO2VBQUFBOztRQVhBQztlQUFBQTs7UUFiQUM7ZUFBQUE7O1FBTkFDO2VBQUFBOztRQUNBQztlQUFBQTs7UUFXQUM7ZUFBQUE7O1FBZkFDO2VBQUFBOztRQUNBQztlQUFBQTs7UUF5QkFDO2VBQUFBOztRQWlCQUM7ZUFBQUE7O1FBaEJBQztlQUFBQTs7UUFUQUM7ZUFBQUE7O1FBTkFDO2VBQUFBOztRQUNBQztlQUFBQTs7UUFOQUM7ZUFBQUE7O1FBcUJBQztlQUFBQTs7UUF2QkFDO2VBQUFBOztRQTZCQUM7ZUFBQUE7O1FBSUFDO2VBQUFBOztRQU5BQztlQUFBQTs7UUF4QkFDO2VBQUFBOztRQVFBQztlQUFBQTs7UUFwQkFDO2VBQUFBOztRQXlDQUM7ZUFBQUE7O1FBcEJBQztlQUFBQTs7UUFwQkFDO2VBQUFBOztRQXNDQUM7ZUFBQUE7O1FBeEJBQztlQUFBQTs7UUFrQkFDO2VBQUFBOztRQU5BQztlQUFBQTs7UUF6QkFDO2VBQUFBOztRQVFBQztlQUFBQTs7UUF3QkFDO2VBQUFBOztRQUNBQztlQUFBQTs7UUFoQ0FDO2VBQUFBOztRQXdDQUM7ZUFBQUE7O1FBN0JBQztlQUFBQTs7O0FBZE4sSUFBTWQsaUJBQWlCO0FBQ3ZCLElBQU1HLGlCQUFpQjtBQUN2QixJQUFNSyxpQkFBaUI7QUFDdkIsSUFBTUksaUJBQWlCO0FBQ3ZCLElBQU01QixrQkFBa0I7QUFDeEIsSUFBTUMsa0JBQWtCO0FBQ3hCLElBQU1sQixrQkFBa0I7QUFDeEIsSUFBTWMsa0JBQWtCO0FBQ3hCLElBQU1DLGtCQUFrQjtBQUN4QixJQUFNWSxrQkFBa0I7QUFDeEIsSUFBTWUsb0JBQW9CO0FBQzFCLElBQU1qQixvQkFBb0I7QUFDMUIsSUFBTU0scUJBQXFCO0FBQzNCLElBQU1sQixxQkFBcUI7QUFDM0IsSUFBTWtDLHFCQUFxQjtBQUMzQixJQUFNVCxxQkFBcUI7QUFDM0IsSUFBTWYsc0JBQXNCO0FBQzVCLElBQU1DLHNCQUFzQjtBQUM1QixJQUFNZCxzQkFBc0I7QUFDNUIsSUFBTU0sc0JBQXNCO0FBQzVCLElBQU1nQixzQkFBc0I7QUFDNUIsSUFBTUcsc0JBQXNCO0FBQzVCLElBQU1iLHVCQUF1QjtBQUM3QixJQUFNcEIsdUJBQXVCO0FBQzdCLElBQU1FLHVCQUF1QjtBQUM3QixJQUFNQyx1QkFBdUI7QUFDN0IsSUFBTU8sdUJBQXVCO0FBQzdCLElBQU00Qix3QkFBd0I7QUFDOUIsSUFBTWpDLHdCQUF3QjtBQUM5QixJQUFNRSx3QkFBd0I7QUFDOUIsSUFBTVUsd0JBQXdCO0FBQzlCLElBQU1FLHlCQUF5QjtBQUMvQixJQUFNSywyQkFBMkI7QUFDakMsSUFBTWEsMkJBQTJCO0FBQ2pDLElBQU1JLDJCQUEyQjtBQUNqQyxJQUFNQyw2QkFBNkI7QUFDbkMsSUFBTWQsOEJBQThCO0FBQ3BDLElBQU1uQiw4QkFBOEI7QUFDcEMsSUFBTWlCLCtCQUErQjtBQUNyQyxJQUFNUywrQkFBK0I7QUFDckMsSUFBTTdCLGdDQUFnQztBQUN0QyxJQUFNMEIsZ0NBQWdDO0FBQ3RDLElBQU1MLGlDQUFpQztBQUN2QyxJQUFNaUIsaUNBQWlDO0FBQ3ZDLElBQU03QyxtQ0FBbUM7QUFDekMsSUFBTUssb0NBQW9DO0FBQzFDLElBQU1ILHFDQUFxQztBQUMzQyxJQUFNaUIscUNBQXFDIn0=