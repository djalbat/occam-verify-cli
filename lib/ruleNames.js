"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AXIOM_RULE_NAME () {
        return AXIOM_RULE_NAME;
    },
    get COMBINATOR_DECLARATION_RULE_NAME () {
        return COMBINATOR_DECLARATION_RULE_NAME;
    },
    get COMBINATOR_RULE_NAME () {
        return COMBINATOR_RULE_NAME;
    },
    get COMPLEX_TYPE_DECLARATION_RULE_NAME () {
        return COMPLEX_TYPE_DECLARATION_RULE_NAME;
    },
    get CONCLUSION_RULE_NAME () {
        return CONCLUSION_RULE_NAME;
    },
    get CONJECTURE_RULE_NAME () {
        return CONJECTURE_RULE_NAME;
    },
    get CONSTRUCTOR_DECLARATION_RULE_NAME () {
        return CONSTRUCTOR_DECLARATION_RULE_NAME;
    },
    get CONSTRUCTOR_RULE_NAME () {
        return CONSTRUCTOR_RULE_NAME;
    },
    get CONTAINED_ASSERTION_RULE_NAME () {
        return CONTAINED_ASSERTION_RULE_NAME;
    },
    get DECLARATION_RULE_NAME () {
        return DECLARATION_RULE_NAME;
    },
    get DEDUCTION_RULE_NAME () {
        return DEDUCTION_RULE_NAME;
    },
    get DEFINED_ASSERTION_RULE_NAME () {
        return DEFINED_ASSERTION_RULE_NAME;
    },
    get DERIVATION_RULE_NAME () {
        return DERIVATION_RULE_NAME;
    },
    get EQUALITY_RULE_NAME () {
        return EQUALITY_RULE_NAME;
    },
    get ERROR_RULE_NAME () {
        return ERROR_RULE_NAME;
    },
    get FRAME_RULE_NAME () {
        return FRAME_RULE_NAME;
    },
    get JUDGEMENT_RULE_NAME () {
        return JUDGEMENT_RULE_NAME;
    },
    get LABEL_RULE_NAME () {
        return LABEL_RULE_NAME;
    },
    get LEMMA_RULE_NAME () {
        return LEMMA_RULE_NAME;
    },
    get METATHEOREM_RULE_NAME () {
        return METATHEOREM_RULE_NAME;
    },
    get METAVARIABLE_DECLARATION_RULE_NAME () {
        return METAVARIABLE_DECLARATION_RULE_NAME;
    },
    get METAVARIABLE_RULE_NAME () {
        return METAVARIABLE_RULE_NAME;
    },
    get META_LEMMA_RULE_NAME () {
        return META_LEMMA_RULE_NAME;
    },
    get META_TYPE_RULE_NAME () {
        return META_TYPE_RULE_NAME;
    },
    get PARAMETER_RULE_NAME () {
        return PARAMETER_RULE_NAME;
    },
    get PREMISE_RULE_NAME () {
        return PREMISE_RULE_NAME;
    },
    get PROCEDURE_CALL_RULE_NAME () {
        return PROCEDURE_CALL_RULE_NAME;
    },
    get PROOF_RULE_NAME () {
        return PROOF_RULE_NAME;
    },
    get PROPERTY_ASSERTION_RULE_NAME () {
        return PROPERTY_ASSERTION_RULE_NAME;
    },
    get PROPERTY_RELATION_RULE_NAME () {
        return PROPERTY_RELATION_RULE_NAME;
    },
    get PROPERTY_RULE_NAME () {
        return PROPERTY_RULE_NAME;
    },
    get REFERENCE_RULE_NAME () {
        return REFERENCE_RULE_NAME;
    },
    get RULE_RULE_NAME () {
        return RULE_RULE_NAME;
    },
    get SATISFIES_ASSERTION_RULE_NAME () {
        return SATISFIES_ASSERTION_RULE_NAME;
    },
    get STATEMENT_RULE_NAME () {
        return STATEMENT_RULE_NAME;
    },
    get STEP_RULE_NAME () {
        return STEP_RULE_NAME;
    },
    get SUBPROOF_ASSERTION_RULE_NAME () {
        return SUBPROOF_ASSERTION_RULE_NAME;
    },
    get SUBPROOF_RULE_NAME () {
        return SUBPROOF_RULE_NAME;
    },
    get SUB_DERIVATION_RULE_NAME () {
        return SUB_DERIVATION_RULE_NAME;
    },
    get SUPPOSITION_RULE_NAME () {
        return SUPPOSITION_RULE_NAME;
    },
    get TERM_RULE_NAME () {
        return TERM_RULE_NAME;
    },
    get THEOREM_RULE_NAME () {
        return THEOREM_RULE_NAME;
    },
    get TYPE_ASSERTION_RULE_NAME () {
        return TYPE_ASSERTION_RULE_NAME;
    },
    get TYPE_DECLARATION_RULE_NAME () {
        return TYPE_DECLARATION_RULE_NAME;
    },
    get TYPE_RULE_NAME () {
        return TYPE_RULE_NAME;
    },
    get VARIABLE_DECLARATION_RULE_NAME () {
        return VARIABLE_DECLARATION_RULE_NAME;
    }
});
var RULE_RULE_NAME = "rule";
var STEP_RULE_NAME = "step";
var TERM_RULE_NAME = "term";
var TYPE_RULE_NAME = "type";
var LABEL_RULE_NAME = "label";
var LEMMA_RULE_NAME = "lemma";
var AXIOM_RULE_NAME = "axiom";
var ERROR_RULE_NAME = "error";
var FRAME_RULE_NAME = "frame";
var PROOF_RULE_NAME = "proof";
var THEOREM_RULE_NAME = "theorem";
var PREMISE_RULE_NAME = "premise";
var PROPERTY_RULE_NAME = "property";
var EQUALITY_RULE_NAME = "equality";
var SUBPROOF_RULE_NAME = "subproof";
var META_TYPE_RULE_NAME = "metaType";
var PARAMETER_RULE_NAME = "parameter";
var DEDUCTION_RULE_NAME = "deduction";
var JUDGEMENT_RULE_NAME = "judgement";
var REFERENCE_RULE_NAME = "reference";
var STATEMENT_RULE_NAME = "statement";
var META_LEMMA_RULE_NAME = "metaLemma";
var COMBINATOR_RULE_NAME = "combinator";
var CONCLUSION_RULE_NAME = "conclusion";
var CONJECTURE_RULE_NAME = "conjecture";
var DERIVATION_RULE_NAME = "derivation";
var SUPPOSITION_RULE_NAME = "supposition";
var CONSTRUCTOR_RULE_NAME = "constructor";
var DECLARATION_RULE_NAME = "declaration";
var METATHEOREM_RULE_NAME = "metatheorem";
var METAVARIABLE_RULE_NAME = "metavariable";
var PROCEDURE_CALL_RULE_NAME = "procedureCall";
var SUB_DERIVATION_RULE_NAME = "subDerivation";
var TYPE_ASSERTION_RULE_NAME = "typeAssertion";
var TYPE_DECLARATION_RULE_NAME = "typeDeclaration";
var PROPERTY_RELATION_RULE_NAME = "propertyRelation";
var DEFINED_ASSERTION_RULE_NAME = "definedAssertion";
var PROPERTY_ASSERTION_RULE_NAME = "propertyAssertion";
var SUBPROOF_ASSERTION_RULE_NAME = "subproofAssertion";
var CONTAINED_ASSERTION_RULE_NAME = "containedAssertion";
var SATISFIES_ASSERTION_RULE_NAME = "satisfiesAssertion";
var VARIABLE_DECLARATION_RULE_NAME = "variableDeclaration";
var COMBINATOR_DECLARATION_RULE_NAME = "combinatorDeclaration";
var CONSTRUCTOR_DECLARATION_RULE_NAME = "constructorDeclaration";
var COMPLEX_TYPE_DECLARATION_RULE_NAME = "complexTypeDeclaration";
var METAVARIABLE_DECLARATION_RULE_NAME = "metavariableDeclaration";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ydWxlTmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBjb25zdCBSVUxFX1JVTEVfTkFNRSA9IFwicnVsZVwiO1xuZXhwb3J0IGNvbnN0IFNURVBfUlVMRV9OQU1FID0gXCJzdGVwXCI7XG5leHBvcnQgY29uc3QgVEVSTV9SVUxFX05BTUUgPSBcInRlcm1cIjtcbmV4cG9ydCBjb25zdCBUWVBFX1JVTEVfTkFNRSA9IFwidHlwZVwiO1xuZXhwb3J0IGNvbnN0IExBQkVMX1JVTEVfTkFNRSA9IFwibGFiZWxcIjtcbmV4cG9ydCBjb25zdCBMRU1NQV9SVUxFX05BTUUgPSBcImxlbW1hXCI7XG5leHBvcnQgY29uc3QgQVhJT01fUlVMRV9OQU1FID0gXCJheGlvbVwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX1JVTEVfTkFNRSA9IFwiZXJyb3JcIjtcbmV4cG9ydCBjb25zdCBGUkFNRV9SVUxFX05BTUUgPSBcImZyYW1lXCI7XG5leHBvcnQgY29uc3QgUFJPT0ZfUlVMRV9OQU1FID0gXCJwcm9vZlwiO1xuZXhwb3J0IGNvbnN0IFRIRU9SRU1fUlVMRV9OQU1FID0gXCJ0aGVvcmVtXCI7XG5leHBvcnQgY29uc3QgUFJFTUlTRV9SVUxFX05BTUUgPSBcInByZW1pc2VcIjtcbmV4cG9ydCBjb25zdCBQUk9QRVJUWV9SVUxFX05BTUUgPSBcInByb3BlcnR5XCI7XG5leHBvcnQgY29uc3QgRVFVQUxJVFlfUlVMRV9OQU1FID0gXCJlcXVhbGl0eVwiO1xuZXhwb3J0IGNvbnN0IFNVQlBST09GX1JVTEVfTkFNRSA9IFwic3VicHJvb2ZcIjtcbmV4cG9ydCBjb25zdCBNRVRBX1RZUEVfUlVMRV9OQU1FID0gXCJtZXRhVHlwZVwiO1xuZXhwb3J0IGNvbnN0IFBBUkFNRVRFUl9SVUxFX05BTUUgPSBcInBhcmFtZXRlclwiO1xuZXhwb3J0IGNvbnN0IERFRFVDVElPTl9SVUxFX05BTUUgPSBcImRlZHVjdGlvblwiO1xuZXhwb3J0IGNvbnN0IEpVREdFTUVOVF9SVUxFX05BTUUgPSBcImp1ZGdlbWVudFwiO1xuZXhwb3J0IGNvbnN0IFJFRkVSRU5DRV9SVUxFX05BTUUgPSBcInJlZmVyZW5jZVwiO1xuZXhwb3J0IGNvbnN0IFNUQVRFTUVOVF9SVUxFX05BTUUgPSBcInN0YXRlbWVudFwiO1xuZXhwb3J0IGNvbnN0IE1FVEFfTEVNTUFfUlVMRV9OQU1FID0gXCJtZXRhTGVtbWFcIjtcbmV4cG9ydCBjb25zdCBDT01CSU5BVE9SX1JVTEVfTkFNRSA9IFwiY29tYmluYXRvclwiO1xuZXhwb3J0IGNvbnN0IENPTkNMVVNJT05fUlVMRV9OQU1FID0gXCJjb25jbHVzaW9uXCI7XG5leHBvcnQgY29uc3QgQ09OSkVDVFVSRV9SVUxFX05BTUUgPSBcImNvbmplY3R1cmVcIjtcbmV4cG9ydCBjb25zdCBERVJJVkFUSU9OX1JVTEVfTkFNRSA9IFwiZGVyaXZhdGlvblwiO1xuZXhwb3J0IGNvbnN0IFNVUFBPU0lUSU9OX1JVTEVfTkFNRSA9IFwic3VwcG9zaXRpb25cIjtcbmV4cG9ydCBjb25zdCBDT05TVFJVQ1RPUl9SVUxFX05BTUUgPSBcImNvbnN0cnVjdG9yXCI7XG5leHBvcnQgY29uc3QgREVDTEFSQVRJT05fUlVMRV9OQU1FID0gXCJkZWNsYXJhdGlvblwiO1xuZXhwb3J0IGNvbnN0IE1FVEFUSEVPUkVNX1JVTEVfTkFNRSA9IFwibWV0YXRoZW9yZW1cIjtcbmV4cG9ydCBjb25zdCBNRVRBVkFSSUFCTEVfUlVMRV9OQU1FID0gXCJtZXRhdmFyaWFibGVcIjtcbmV4cG9ydCBjb25zdCBQUk9DRURVUkVfQ0FMTF9SVUxFX05BTUUgPSBcInByb2NlZHVyZUNhbGxcIjtcbmV4cG9ydCBjb25zdCBTVUJfREVSSVZBVElPTl9SVUxFX05BTUUgPSBcInN1YkRlcml2YXRpb25cIjtcbmV4cG9ydCBjb25zdCBUWVBFX0FTU0VSVElPTl9SVUxFX05BTUUgPSBcInR5cGVBc3NlcnRpb25cIjtcbmV4cG9ydCBjb25zdCBUWVBFX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSA9IFwidHlwZURlY2xhcmF0aW9uXCI7XG5leHBvcnQgY29uc3QgUFJPUEVSVFlfUkVMQVRJT05fUlVMRV9OQU1FID0gXCJwcm9wZXJ0eVJlbGF0aW9uXCI7XG5leHBvcnQgY29uc3QgREVGSU5FRF9BU1NFUlRJT05fUlVMRV9OQU1FID0gXCJkZWZpbmVkQXNzZXJ0aW9uXCI7XG5leHBvcnQgY29uc3QgUFJPUEVSVFlfQVNTRVJUSU9OX1JVTEVfTkFNRSA9IFwicHJvcGVydHlBc3NlcnRpb25cIjtcbmV4cG9ydCBjb25zdCBTVUJQUk9PRl9BU1NFUlRJT05fUlVMRV9OQU1FID0gXCJzdWJwcm9vZkFzc2VydGlvblwiO1xuZXhwb3J0IGNvbnN0IENPTlRBSU5FRF9BU1NFUlRJT05fUlVMRV9OQU1FID0gXCJjb250YWluZWRBc3NlcnRpb25cIjtcbmV4cG9ydCBjb25zdCBTQVRJU0ZJRVNfQVNTRVJUSU9OX1JVTEVfTkFNRSA9IFwic2F0aXNmaWVzQXNzZXJ0aW9uXCI7XG5leHBvcnQgY29uc3QgVkFSSUFCTEVfREVDTEFSQVRJT05fUlVMRV9OQU1FID0gXCJ2YXJpYWJsZURlY2xhcmF0aW9uXCI7XG5leHBvcnQgY29uc3QgQ09NQklOQVRPUl9ERUNMQVJBVElPTl9SVUxFX05BTUUgPSBcImNvbWJpbmF0b3JEZWNsYXJhdGlvblwiO1xuZXhwb3J0IGNvbnN0IENPTlNUUlVDVE9SX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSA9IFwiY29uc3RydWN0b3JEZWNsYXJhdGlvblwiO1xuZXhwb3J0IGNvbnN0IENPTVBMRVhfVFlQRV9ERUNMQVJBVElPTl9SVUxFX05BTUUgPSBcImNvbXBsZXhUeXBlRGVjbGFyYXRpb25cIjtcbmV4cG9ydCBjb25zdCBNRVRBVkFSSUFCTEVfREVDTEFSQVRJT05fUlVMRV9OQU1FID0gXCJtZXRhdmFyaWFibGVEZWNsYXJhdGlvblwiO1xuIl0sIm5hbWVzIjpbIkFYSU9NX1JVTEVfTkFNRSIsIkNPTUJJTkFUT1JfREVDTEFSQVRJT05fUlVMRV9OQU1FIiwiQ09NQklOQVRPUl9SVUxFX05BTUUiLCJDT01QTEVYX1RZUEVfREVDTEFSQVRJT05fUlVMRV9OQU1FIiwiQ09OQ0xVU0lPTl9SVUxFX05BTUUiLCJDT05KRUNUVVJFX1JVTEVfTkFNRSIsIkNPTlNUUlVDVE9SX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSIsIkNPTlNUUlVDVE9SX1JVTEVfTkFNRSIsIkNPTlRBSU5FRF9BU1NFUlRJT05fUlVMRV9OQU1FIiwiREVDTEFSQVRJT05fUlVMRV9OQU1FIiwiREVEVUNUSU9OX1JVTEVfTkFNRSIsIkRFRklORURfQVNTRVJUSU9OX1JVTEVfTkFNRSIsIkRFUklWQVRJT05fUlVMRV9OQU1FIiwiRVFVQUxJVFlfUlVMRV9OQU1FIiwiRVJST1JfUlVMRV9OQU1FIiwiRlJBTUVfUlVMRV9OQU1FIiwiSlVER0VNRU5UX1JVTEVfTkFNRSIsIkxBQkVMX1JVTEVfTkFNRSIsIkxFTU1BX1JVTEVfTkFNRSIsIk1FVEFUSEVPUkVNX1JVTEVfTkFNRSIsIk1FVEFWQVJJQUJMRV9ERUNMQVJBVElPTl9SVUxFX05BTUUiLCJNRVRBVkFSSUFCTEVfUlVMRV9OQU1FIiwiTUVUQV9MRU1NQV9SVUxFX05BTUUiLCJNRVRBX1RZUEVfUlVMRV9OQU1FIiwiUEFSQU1FVEVSX1JVTEVfTkFNRSIsIlBSRU1JU0VfUlVMRV9OQU1FIiwiUFJPQ0VEVVJFX0NBTExfUlVMRV9OQU1FIiwiUFJPT0ZfUlVMRV9OQU1FIiwiUFJPUEVSVFlfQVNTRVJUSU9OX1JVTEVfTkFNRSIsIlBST1BFUlRZX1JFTEFUSU9OX1JVTEVfTkFNRSIsIlBST1BFUlRZX1JVTEVfTkFNRSIsIlJFRkVSRU5DRV9SVUxFX05BTUUiLCJSVUxFX1JVTEVfTkFNRSIsIlNBVElTRklFU19BU1NFUlRJT05fUlVMRV9OQU1FIiwiU1RBVEVNRU5UX1JVTEVfTkFNRSIsIlNURVBfUlVMRV9OQU1FIiwiU1VCUFJPT0ZfQVNTRVJUSU9OX1JVTEVfTkFNRSIsIlNVQlBST09GX1JVTEVfTkFNRSIsIlNVQl9ERVJJVkFUSU9OX1JVTEVfTkFNRSIsIlNVUFBPU0lUSU9OX1JVTEVfTkFNRSIsIlRFUk1fUlVMRV9OQU1FIiwiVEhFT1JFTV9SVUxFX05BTUUiLCJUWVBFX0FTU0VSVElPTl9SVUxFX05BTUUiLCJUWVBFX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSIsIlRZUEVfUlVMRV9OQU1FIiwiVkFSSUFCTEVfREVDTEFSQVRJT05fUlVMRV9OQU1FIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7UUFRYUE7ZUFBQUE7O1FBb0NBQztlQUFBQTs7UUFwQkFDO2VBQUFBOztRQXNCQUM7ZUFBQUE7O1FBckJBQztlQUFBQTs7UUFDQUM7ZUFBQUE7O1FBbUJBQztlQUFBQTs7UUFoQkFDO2VBQUFBOztRQVlBQztlQUFBQTs7UUFYQUM7ZUFBQUE7O1FBWEFDO2VBQUFBOztRQW1CQUM7ZUFBQUE7O1FBWEFDO2VBQUFBOztRQVpBQztlQUFBQTs7UUFOQUM7ZUFBQUE7O1FBQ0FDO2VBQUFBOztRQVVBQztlQUFBQTs7UUFkQUM7ZUFBQUE7O1FBQ0FDO2VBQUFBOztRQXdCQUM7ZUFBQUE7O1FBZ0JBQztlQUFBQTs7UUFmQUM7ZUFBQUE7O1FBVEFDO2VBQUFBOztRQU5BQztlQUFBQTs7UUFDQUM7ZUFBQUE7O1FBTEFDO2VBQUFBOztRQW9CQUM7ZUFBQUE7O1FBdEJBQztlQUFBQTs7UUE0QkFDO2VBQUFBOztRQUZBQztlQUFBQTs7UUF2QkFDO2VBQUFBOztRQU9BQztlQUFBQTs7UUFuQkFDO2VBQUFBOztRQXdDQUM7ZUFBQUE7O1FBcEJBQztlQUFBQTs7UUFuQkFDO2VBQUFBOztRQXFDQUM7ZUFBQUE7O1FBeEJBQztlQUFBQTs7UUFrQkFDO2VBQUFBOztRQU5BQztlQUFBQTs7UUF4QkFDO2VBQUFBOztRQVFBQztlQUFBQTs7UUF1QkFDO2VBQUFBOztRQUNBQztlQUFBQTs7UUEvQkFDO2VBQUFBOztRQXNDQUM7ZUFBQUE7OztBQXpDTixJQUFNYixpQkFBaUI7QUFDdkIsSUFBTUcsaUJBQWlCO0FBQ3ZCLElBQU1LLGlCQUFpQjtBQUN2QixJQUFNSSxpQkFBaUI7QUFDdkIsSUFBTTNCLGtCQUFrQjtBQUN4QixJQUFNQyxrQkFBa0I7QUFDeEIsSUFBTWxCLGtCQUFrQjtBQUN4QixJQUFNYyxrQkFBa0I7QUFDeEIsSUFBTUMsa0JBQWtCO0FBQ3hCLElBQU1ZLGtCQUFrQjtBQUN4QixJQUFNYyxvQkFBb0I7QUFDMUIsSUFBTWhCLG9CQUFvQjtBQUMxQixJQUFNSyxxQkFBcUI7QUFDM0IsSUFBTWpCLHFCQUFxQjtBQUMzQixJQUFNd0IscUJBQXFCO0FBQzNCLElBQU1kLHNCQUFzQjtBQUM1QixJQUFNQyxzQkFBc0I7QUFDNUIsSUFBTWQsc0JBQXNCO0FBQzVCLElBQU1NLHNCQUFzQjtBQUM1QixJQUFNZSxzQkFBc0I7QUFDNUIsSUFBTUcsc0JBQXNCO0FBQzVCLElBQU1aLHVCQUF1QjtBQUM3QixJQUFNcEIsdUJBQXVCO0FBQzdCLElBQU1FLHVCQUF1QjtBQUM3QixJQUFNQyx1QkFBdUI7QUFDN0IsSUFBTU8sdUJBQXVCO0FBQzdCLElBQU0yQix3QkFBd0I7QUFDOUIsSUFBTWhDLHdCQUF3QjtBQUM5QixJQUFNRSx3QkFBd0I7QUFDOUIsSUFBTVUsd0JBQXdCO0FBQzlCLElBQU1FLHlCQUF5QjtBQUMvQixJQUFNSywyQkFBMkI7QUFDakMsSUFBTVksMkJBQTJCO0FBQ2pDLElBQU1JLDJCQUEyQjtBQUNqQyxJQUFNQyw2QkFBNkI7QUFDbkMsSUFBTWQsOEJBQThCO0FBQ3BDLElBQU1sQiw4QkFBOEI7QUFDcEMsSUFBTWlCLCtCQUErQjtBQUNyQyxJQUFNUSwrQkFBK0I7QUFDckMsSUFBTTVCLGdDQUFnQztBQUN0QyxJQUFNeUIsZ0NBQWdDO0FBQ3RDLElBQU1ZLGlDQUFpQztBQUN2QyxJQUFNNUMsbUNBQW1DO0FBQ3pDLElBQU1LLG9DQUFvQztBQUMxQyxJQUFNSCxxQ0FBcUM7QUFDM0MsSUFBTWlCLHFDQUFxQyJ9