"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ARGUMENT_RULE_NAME () {
        return ARGUMENT_RULE_NAME;
    },
    get AXIOM_BODY_RULE_NAME () {
        return AXIOM_BODY_RULE_NAME;
    },
    get AXIOM_HEADER_RULE_NAME () {
        return AXIOM_HEADER_RULE_NAME;
    },
    get AXIOM_RULE_NAME () {
        return AXIOM_RULE_NAME;
    },
    get COMBINATOR_DECLARATION_RULE_NAME () {
        return COMBINATOR_DECLARATION_RULE_NAME;
    },
    get COMBINATOR_RULE_NAME () {
        return COMBINATOR_RULE_NAME;
    },
    get COMPLEX_TYPE_DECLARATION_RULE_NAME () {
        return COMPLEX_TYPE_DECLARATION_RULE_NAME;
    },
    get CONCLUSION_RULE_NAME () {
        return CONCLUSION_RULE_NAME;
    },
    get CONJECTURE_BODY_RULE_NAME () {
        return CONJECTURE_BODY_RULE_NAME;
    },
    get CONJECTURE_HEADER_RULE_NAME () {
        return CONJECTURE_HEADER_RULE_NAME;
    },
    get CONJECTURE_RULE_NAME () {
        return CONJECTURE_RULE_NAME;
    },
    get CONSTRUCTOR_DECLARATION_RULE_NAME () {
        return CONSTRUCTOR_DECLARATION_RULE_NAME;
    },
    get CONSTRUCTOR_RULE_NAME () {
        return CONSTRUCTOR_RULE_NAME;
    },
    get CONTAINED_ASSERTION_RULE_NAME () {
        return CONTAINED_ASSERTION_RULE_NAME;
    },
    get DECLARATION_RULE_NAME () {
        return DECLARATION_RULE_NAME;
    },
    get DEDUCTION_RULE_NAME () {
        return DEDUCTION_RULE_NAME;
    },
    get DEFINED_ASSERTION_RULE_NAME () {
        return DEFINED_ASSERTION_RULE_NAME;
    },
    get DERIVATION_RULE_NAME () {
        return DERIVATION_RULE_NAME;
    },
    get EQUALITY_RULE_NAME () {
        return EQUALITY_RULE_NAME;
    },
    get ERROR_RULE_NAME () {
        return ERROR_RULE_NAME;
    },
    get FRAME_RULE_NAME () {
        return FRAME_RULE_NAME;
    },
    get FRAME_SUBSTITUTION_RULE_NAME () {
        return FRAME_SUBSTITUTION_RULE_NAME;
    },
    get HYPOTHESIS_RULE_NAME () {
        return HYPOTHESIS_RULE_NAME;
    },
    get JUDGEMENT_RULE_NAME () {
        return JUDGEMENT_RULE_NAME;
    },
    get LABELS_RULE_NAME () {
        return LABELS_RULE_NAME;
    },
    get LABEL_RULE_NAME () {
        return LABEL_RULE_NAME;
    },
    get LEMMA_BODY_RULE_NAME () {
        return LEMMA_BODY_RULE_NAME;
    },
    get LEMMA_HEADER_RULE_NAME () {
        return LEMMA_HEADER_RULE_NAME;
    },
    get LEMMA_RULE_NAME () {
        return LEMMA_RULE_NAME;
    },
    get METATHEOREM_BODY_RULE_NAME () {
        return METATHEOREM_BODY_RULE_NAME;
    },
    get METATHEOREM_HEADER_RULE_NAME () {
        return METATHEOREM_HEADER_RULE_NAME;
    },
    get METATHEOREM_RULE_NAME () {
        return METATHEOREM_RULE_NAME;
    },
    get METAVARIABLE_DECLARATION_RULE_NAME () {
        return METAVARIABLE_DECLARATION_RULE_NAME;
    },
    get METAVARIABLE_RULE_NAME () {
        return METAVARIABLE_RULE_NAME;
    },
    get META_ARGUMENT_RULE_NAME () {
        return META_ARGUMENT_RULE_NAME;
    },
    get META_LEMMA_BODY_RULE_NAME () {
        return META_LEMMA_BODY_RULE_NAME;
    },
    get META_LEMMA_HEADER_RULE_NAME () {
        return META_LEMMA_HEADER_RULE_NAME;
    },
    get META_LEMMA_RULE_NAME () {
        return META_LEMMA_RULE_NAME;
    },
    get META_TYPE_RULE_NAME () {
        return META_TYPE_RULE_NAME;
    },
    get NONSENSE_RULE_NAME () {
        return NONSENSE_RULE_NAME;
    },
    get PARAMETER_RULE_NAME () {
        return PARAMETER_RULE_NAME;
    },
    get PARENTHESISED_LABELS_RULE_NAME () {
        return PARENTHESISED_LABELS_RULE_NAME;
    },
    get PARENTHESISED_LABEL_RULE_NAME () {
        return PARENTHESISED_LABEL_RULE_NAME;
    },
    get PREMISE_RULE_NAME () {
        return PREMISE_RULE_NAME;
    },
    get PROCEDURE_CALL_RULE_NAME () {
        return PROCEDURE_CALL_RULE_NAME;
    },
    get PROOF_RULE_NAME () {
        return PROOF_RULE_NAME;
    },
    get PROPERTY_ASSERTION_RULE_NAME () {
        return PROPERTY_ASSERTION_RULE_NAME;
    },
    get PROPERTY_DECLARATION_RULE_NAME () {
        return PROPERTY_DECLARATION_RULE_NAME;
    },
    get PROPERTY_RELATION_RULE_NAME () {
        return PROPERTY_RELATION_RULE_NAME;
    },
    get PROPERTY_RULE_NAME () {
        return PROPERTY_RULE_NAME;
    },
    get QUALIFICATION_RULE_NAME () {
        return QUALIFICATION_RULE_NAME;
    },
    get REFERENCE_RULE_NAME () {
        return REFERENCE_RULE_NAME;
    },
    get RULE_BODY_RULE_NAME () {
        return RULE_BODY_RULE_NAME;
    },
    get RULE_HEADER_RULE_NAME () {
        return RULE_HEADER_RULE_NAME;
    },
    get RULE_RULE_NAME () {
        return RULE_RULE_NAME;
    },
    get SATISFIES_ASSERTION_RULE_NAME () {
        return SATISFIES_ASSERTION_RULE_NAME;
    },
    get SECTION_RULE_NAME () {
        return SECTION_RULE_NAME;
    },
    get SIGNATURE_RULE_NAME () {
        return SIGNATURE_RULE_NAME;
    },
    get SIMPLE_TYPE_DECLARATION_RULE_NAME () {
        return SIMPLE_TYPE_DECLARATION_RULE_NAME;
    },
    get STATEMENT_RULE_NAME () {
        return STATEMENT_RULE_NAME;
    },
    get STATEMENT_SUBSTITUTION_RULE_NAME () {
        return STATEMENT_SUBSTITUTION_RULE_NAME;
    },
    get STEP_RULE_NAME () {
        return STEP_RULE_NAME;
    },
    get SUBPROOF_ASSERTION_RULE_NAME () {
        return SUBPROOF_ASSERTION_RULE_NAME;
    },
    get SUBPROOF_RULE_NAME () {
        return SUBPROOF_RULE_NAME;
    },
    get SUB_DERIVATION_RULE_NAME () {
        return SUB_DERIVATION_RULE_NAME;
    },
    get SUPPOSITION_RULE_NAME () {
        return SUPPOSITION_RULE_NAME;
    },
    get TERM_RULE_NAME () {
        return TERM_RULE_NAME;
    },
    get TERM_SUBSTITUTION_RULE_NAME () {
        return TERM_SUBSTITUTION_RULE_NAME;
    },
    get THEOREM_BODY_RULE_NAME () {
        return THEOREM_BODY_RULE_NAME;
    },
    get THEOREM_HEADER_RULE_NAME () {
        return THEOREM_HEADER_RULE_NAME;
    },
    get THEOREM_RULE_NAME () {
        return THEOREM_RULE_NAME;
    },
    get TYPES_RULE_NAME () {
        return TYPES_RULE_NAME;
    },
    get TYPE_ASSERTION_RULE_NAME () {
        return TYPE_ASSERTION_RULE_NAME;
    },
    get TYPE_PREFIX_DECLARATION_RULE_NAME () {
        return TYPE_PREFIX_DECLARATION_RULE_NAME;
    },
    get TYPE_PREFIX_RULE_NAME () {
        return TYPE_PREFIX_RULE_NAME;
    },
    get TYPE_RULE_NAME () {
        return TYPE_RULE_NAME;
    },
    get VARIABLE_DECLARATION_RULE_NAME () {
        return VARIABLE_DECLARATION_RULE_NAME;
    },
    get VARIABLE_RULE_NAME () {
        return VARIABLE_RULE_NAME;
    }
});
var RULE_RULE_NAME = "rule";
var STEP_RULE_NAME = "step";
var TERM_RULE_NAME = "term";
var TYPE_RULE_NAME = "type";
var TYPES_RULE_NAME = "types";
var LEMMA_RULE_NAME = "lemma";
var AXIOM_RULE_NAME = "axiom";
var ERROR_RULE_NAME = "error";
var FRAME_RULE_NAME = "frame";
var PROOF_RULE_NAME = "proof";
var LABEL_RULE_NAME = "label";
var LABELS_RULE_NAME = "labels";
var THEOREM_RULE_NAME = "theorem";
var PREMISE_RULE_NAME = "premise";
var SECTION_RULE_NAME = "section";
var ARGUMENT_RULE_NAME = "argument";
var PROPERTY_RULE_NAME = "property";
var EQUALITY_RULE_NAME = "equality";
var VARIABLE_RULE_NAME = "variable";
var SUBPROOF_RULE_NAME = "subproof";
var NONSENSE_RULE_NAME = "nonsense";
var SIGNATURE_RULE_NAME = "signature";
var META_TYPE_RULE_NAME = "metaType";
var PARAMETER_RULE_NAME = "parameter";
var DEDUCTION_RULE_NAME = "deduction";
var JUDGEMENT_RULE_NAME = "judgement";
var REFERENCE_RULE_NAME = "reference";
var STATEMENT_RULE_NAME = "statement";
var RULE_BODY_RULE_NAME = "ruleBody";
var META_LEMMA_RULE_NAME = "metaLemma";
var COMBINATOR_RULE_NAME = "combinator";
var CONCLUSION_RULE_NAME = "conclusion";
var CONJECTURE_RULE_NAME = "conjecture";
var DERIVATION_RULE_NAME = "derivation";
var HYPOTHESIS_RULE_NAME = "hypothesis";
var AXIOM_BODY_RULE_NAME = "axiomBody";
var LEMMA_BODY_RULE_NAME = "lemmaBody";
var TYPE_PREFIX_RULE_NAME = "typePrefix";
var SUPPOSITION_RULE_NAME = "supposition";
var CONSTRUCTOR_RULE_NAME = "constructor";
var DECLARATION_RULE_NAME = "declaration";
var METATHEOREM_RULE_NAME = "metatheorem";
var RULE_HEADER_RULE_NAME = "ruleHeader";
var AXIOM_HEADER_RULE_NAME = "axiomHeader";
var LEMMA_HEADER_RULE_NAME = "lemmaHeader";
var THEOREM_BODY_RULE_NAME = "theoremBody";
var METAVARIABLE_RULE_NAME = "metavariable";
var META_ARGUMENT_RULE_NAME = "metaArgument";
var QUALIFICATION_RULE_NAME = "qualification";
var PROCEDURE_CALL_RULE_NAME = "procedureCall";
var SUB_DERIVATION_RULE_NAME = "subDerivation";
var TYPE_ASSERTION_RULE_NAME = "typeAssertion";
var THEOREM_HEADER_RULE_NAME = "theoremHeader";
var META_LEMMA_BODY_RULE_NAME = "metaLemmaBody";
var CONJECTURE_BODY_RULE_NAME = "conjectureBody";
var METATHEOREM_BODY_RULE_NAME = "metatheoremBody";
var META_LEMMA_HEADER_RULE_NAME = "metaLemmaHeader";
var PROPERTY_RELATION_RULE_NAME = "propertyRelation";
var DEFINED_ASSERTION_RULE_NAME = "definedAssertion";
var TERM_SUBSTITUTION_RULE_NAME = "termSubstitution";
var CONJECTURE_HEADER_RULE_NAME = "conjectureHeader";
var METATHEOREM_HEADER_RULE_NAME = "metatheoremHeader";
var PROPERTY_ASSERTION_RULE_NAME = "propertyAssertion";
var SUBPROOF_ASSERTION_RULE_NAME = "subproofAssertion";
var FRAME_SUBSTITUTION_RULE_NAME = "frameSubstitution";
var CONTAINED_ASSERTION_RULE_NAME = "containedAssertion";
var SATISFIES_ASSERTION_RULE_NAME = "satisfiesAssertion";
var PARENTHESISED_LABEL_RULE_NAME = "parenthesisedLabel";
var PARENTHESISED_LABELS_RULE_NAME = "parenthesisedLabels";
var PROPERTY_DECLARATION_RULE_NAME = "propertyDeclaration";
var VARIABLE_DECLARATION_RULE_NAME = "variableDeclaration";
var STATEMENT_SUBSTITUTION_RULE_NAME = "statementSubstitution";
var COMBINATOR_DECLARATION_RULE_NAME = "combinatorDeclaration";
var TYPE_PREFIX_DECLARATION_RULE_NAME = "typePrefixDeclaration";
var SIMPLE_TYPE_DECLARATION_RULE_NAME = "simpleTypeDeclaration";
var CONSTRUCTOR_DECLARATION_RULE_NAME = "constructorDeclaration";
var COMPLEX_TYPE_DECLARATION_RULE_NAME = "complexTypeDeclaration";
var METAVARIABLE_DECLARATION_RULE_NAME = "metavariableDeclaration";

//# sourceMappingURL=data:application/json;base64,