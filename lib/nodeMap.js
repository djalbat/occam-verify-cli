"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _term = /*#__PURE__*/ _interop_require_default(require("./node/term"));
var _type = /*#__PURE__*/ _interop_require_default(require("./node/type"));
var _rule = /*#__PURE__*/ _interop_require_default(require("./node/rule"));
var _step = /*#__PURE__*/ _interop_require_default(require("./node/step"));
var _error = /*#__PURE__*/ _interop_require_default(require("./node/error"));
var _frame = /*#__PURE__*/ _interop_require_default(require("./node/frame"));
var _axiom = /*#__PURE__*/ _interop_require_default(require("./node/axiom"));
var _label = /*#__PURE__*/ _interop_require_default(require("./node/label"));
var _lemma = /*#__PURE__*/ _interop_require_default(require("./node/lemma"));
var _proof = /*#__PURE__*/ _interop_require_default(require("./node/proof"));
var _premise = /*#__PURE__*/ _interop_require_default(require("./node/premise"));
var _theorem = /*#__PURE__*/ _interop_require_default(require("./node/theorem"));
var _subproof = /*#__PURE__*/ _interop_require_default(require("./node/subproof"));
var _property = /*#__PURE__*/ _interop_require_default(require("./node/property"));
var _metaType = /*#__PURE__*/ _interop_require_default(require("./node/metaType"));
var _equality = /*#__PURE__*/ _interop_require_default(require("./node/equality"));
var _variable = /*#__PURE__*/ _interop_require_default(require("./node/variable"));
var _statement = /*#__PURE__*/ _interop_require_default(require("./node/statement"));
var _reference = /*#__PURE__*/ _interop_require_default(require("./node/reference"));
var _deduction = /*#__PURE__*/ _interop_require_default(require("./node/deduction"));
var _judgement = /*#__PURE__*/ _interop_require_default(require("./node/judgement"));
var _metaLemma = /*#__PURE__*/ _interop_require_default(require("./node/metaLemma"));
var _parameter = /*#__PURE__*/ _interop_require_default(require("./node/parameter"));
var _derivation = /*#__PURE__*/ _interop_require_default(require("./node/derivation"));
var _combinator = /*#__PURE__*/ _interop_require_default(require("./node/combinator"));
var _conclusion = /*#__PURE__*/ _interop_require_default(require("./node/conclusion"));
var _conjecture = /*#__PURE__*/ _interop_require_default(require("./node/conjecture"));
var _supposition = /*#__PURE__*/ _interop_require_default(require("./node/supposition"));
var _constructor = /*#__PURE__*/ _interop_require_default(require("./node/constructor"));
var _declaration = /*#__PURE__*/ _interop_require_default(require("./node/declaration"));
var _metatheorem = /*#__PURE__*/ _interop_require_default(require("./node/metatheorem"));
var _metavariable = /*#__PURE__*/ _interop_require_default(require("./node/metavariable"));
var _procedureCall = /*#__PURE__*/ _interop_require_default(require("./node/procedureCall"));
var _subDerivation = /*#__PURE__*/ _interop_require_default(require("./node/subDerivation"));
var _type1 = /*#__PURE__*/ _interop_require_default(require("./node/assertion/type"));
var _type2 = /*#__PURE__*/ _interop_require_default(require("./node/declaration/type"));
var _propertyRelation = /*#__PURE__*/ _interop_require_default(require("./node/propertyRelation"));
var _defined = /*#__PURE__*/ _interop_require_default(require("./node/assertion/defined"));
var _property1 = /*#__PURE__*/ _interop_require_default(require("./node/assertion/property"));
var _subproof1 = /*#__PURE__*/ _interop_require_default(require("./node/assertion/subproof"));
var _contained = /*#__PURE__*/ _interop_require_default(require("./node/assertion/contained"));
var _satisfies = /*#__PURE__*/ _interop_require_default(require("./node/assertion/satisfies"));
var _property2 = /*#__PURE__*/ _interop_require_default(require("./node/declaration/property"));
var _variable1 = /*#__PURE__*/ _interop_require_default(require("./node/declaration/variable"));
var _combinator1 = /*#__PURE__*/ _interop_require_default(require("./node/declaration/combinator"));
var _complexType = /*#__PURE__*/ _interop_require_default(require("./node/declaration/complexType"));
var _constructor1 = /*#__PURE__*/ _interop_require_default(require("./node/declaration/constructor"));
var _metavariable1 = /*#__PURE__*/ _interop_require_default(require("./node/declaration/metavariable"));
var _ruleNames = require("./ruleNames");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _obj;
var ruleMap = (_obj = {}, _define_property(_obj, _ruleNames.RULE_RULE_NAME, _rule.default), _define_property(_obj, _ruleNames.STEP_RULE_NAME, _step.default), _define_property(_obj, _ruleNames.TERM_RULE_NAME, _term.default), _define_property(_obj, _ruleNames.TYPE_RULE_NAME, _type.default), _define_property(_obj, _ruleNames.ERROR_RULE_NAME, _error.default), _define_property(_obj, _ruleNames.FRAME_RULE_NAME, _frame.default), _define_property(_obj, _ruleNames.LABEL_RULE_NAME, _label.default), _define_property(_obj, _ruleNames.LEMMA_RULE_NAME, _lemma.default), _define_property(_obj, _ruleNames.AXIOM_RULE_NAME, _axiom.default), _define_property(_obj, _ruleNames.PROOF_RULE_NAME, _proof.default), _define_property(_obj, _ruleNames.THEOREM_RULE_NAME, _theorem.default), _define_property(_obj, _ruleNames.PREMISE_RULE_NAME, _premise.default), _define_property(_obj, _ruleNames.PROPERTY_RULE_NAME, _property.default), _define_property(_obj, _ruleNames.SUBPROOF_RULE_NAME, _subproof.default), _define_property(_obj, _ruleNames.EQUALITY_RULE_NAME, _equality.default), _define_property(_obj, _ruleNames.VARIABLE_RULE_NAME, _variable.default), _define_property(_obj, _ruleNames.REFERENCE_RULE_NAME, _reference.default), _define_property(_obj, _ruleNames.JUDGEMENT_RULE_NAME, _judgement.default), _define_property(_obj, _ruleNames.META_TYPE_RULE_NAME, _metaType.default), _define_property(_obj, _ruleNames.DEDUCTION_RULE_NAME, _deduction.default), _define_property(_obj, _ruleNames.PARAMETER_RULE_NAME, _parameter.default), _define_property(_obj, _ruleNames.STATEMENT_RULE_NAME, _statement.default), _define_property(_obj, _ruleNames.COMBINATOR_RULE_NAME, _combinator.default), _define_property(_obj, _ruleNames.CONCLUSION_RULE_NAME, _conclusion.default), _define_property(_obj, _ruleNames.CONJECTURE_RULE_NAME, _conjecture.default), _define_property(_obj, _ruleNames.DERIVATION_RULE_NAME, _derivation.default), _define_property(_obj, _ruleNames.META_LEMMA_RULE_NAME, _metaLemma.default), _define_property(_obj, _ruleNames.SUPPOSITION_RULE_NAME, _supposition.default), _define_property(_obj, _ruleNames.CONSTRUCTOR_RULE_NAME, _constructor.default), _define_property(_obj, _ruleNames.DECLARATION_RULE_NAME, _declaration.default), _define_property(_obj, _ruleNames.METATHEOREM_RULE_NAME, _metatheorem.default), _define_property(_obj, _ruleNames.METAVARIABLE_RULE_NAME, _metavariable.default), _define_property(_obj, _ruleNames.TYPE_ASSERTION_RULE_NAME, _type1.default), _define_property(_obj, _ruleNames.PROCEDURE_CALL_RULE_NAME, _procedureCall.default), _define_property(_obj, _ruleNames.SUB_DERIVATION_RULE_NAME, _subDerivation.default), _define_property(_obj, _ruleNames.TYPE_DECLARATION_RULE_NAME, _type2.default), _define_property(_obj, _ruleNames.PROPERTY_RELATION_RULE_NAME, _propertyRelation.default), _define_property(_obj, _ruleNames.DEFINED_ASSERTION_RULE_NAME, _defined.default), _define_property(_obj, _ruleNames.SUBPROOF_ASSERTION_RULE_NAME, _subproof1.default), _define_property(_obj, _ruleNames.PROPERTY_ASSERTION_RULE_NAME, _property1.default), _define_property(_obj, _ruleNames.SATISFIES_ASSERTION_RULE_NAME, _satisfies.default), _define_property(_obj, _ruleNames.CONTAINED_ASSERTION_RULE_NAME, _contained.default), _define_property(_obj, _ruleNames.VARIABLE_DECLARATION_RULE_NAME, _variable1.default), _define_property(_obj, _ruleNames.PROPERTY_DECLARATION_RULE_NAME, _property2.default), _define_property(_obj, _ruleNames.COMBINATOR_DECLARATION_RULE_NAME, _combinator1.default), _define_property(_obj, _ruleNames.CONSTRUCTOR_DECLARATION_RULE_NAME, _constructor1.default), _define_property(_obj, _ruleNames.COMPLEX_TYPE_DECLARATION_RULE_NAME, _complexType.default), _define_property(_obj, _ruleNames.METAVARIABLE_DECLARATION_RULE_NAME, _metavariable1.default), _obj);
var _default = ruleMap;

//# sourceMappingURL=data:application/json;base64,