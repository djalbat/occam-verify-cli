"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get bracketedStatementChildNodeFromStatementNode () {
        return bracketedStatementChildNodeFromStatementNode;
    },
    get bracketedTermChildNodeFromTermNode () {
        return bracketedTermChildNodeFromTermNode;
    },
    get stripBracketsFromReference () {
        return stripBracketsFromReference;
    },
    get stripBracketsFromStatement () {
        return stripBracketsFromStatement;
    },
    get stripBracketsFromStatementNode () {
        return stripBracketsFromStatementNode;
    },
    get stripBracketsFromTerm () {
        return stripBracketsFromTerm;
    },
    get stripBracketsFromTermNode () {
        return stripBracketsFromTermNode;
    }
});
var _dom = /*#__PURE__*/ _interop_require_default(require("../dom"));
var _local = /*#__PURE__*/ _interop_require_default(require("../context/local"));
var _combinator = /*#__PURE__*/ _interop_require_default(require("../context/bracketed/combinator"));
var _constructor = /*#__PURE__*/ _interop_require_default(require("../context/bracketed/constructor"));
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function stripBracketsFromTerm(term, context) {
    var termNode = term.getNode(), bracketedTermChildNode = bracketedTermChildNodeFromTermNode(termNode);
    if (bracketedTermChildNode !== null) {
        var Term = _dom.default.Term, termNode1 = bracketedTermChildNode; ///
        term = Term.fromTermNode(termNode1, context);
    }
    return term;
}
function stripBracketsFromReference(reference, context) {
    var referenceNode = reference.getNode(), bracketedReferenceChildNode = bracketedReferenceChildNodeFromReferenceNode(referenceNode);
    if (bracketedReferenceChildNode !== null) {
        context = contextFromReference(reference, context); ///
        var Reference = _dom.default.Reference, referenceNode1 = bracketedReferenceChildNode; ///
        reference = Reference.fromReferenceNode(referenceNode1, context);
    }
    return reference;
}
function stripBracketsFromStatement(statement, context) {
    var statementNode = statement.getNode(), bracketedStatementChildNode = bracketedStatementChildNodeFromStatementNode(statementNode);
    if (bracketedStatementChildNode !== null) {
        context = contextFromStatement(statement, context); ///
        var Statement = _dom.default.Statement, statementNode1 = bracketedStatementChildNode; ///
        statement = Statement.fromStatementNode(statementNode1, context);
    }
    return statement;
}
function stripBracketsFromTermNode(termNode) {
    var bracketedTermChildNode = bracketedTermChildNodeFromTermNode(termNode);
    if (bracketedTermChildNode !== null) {
        termNode = bracketedTermChildNode; ///
    }
    return termNode;
}
function stripBracketsFromStatementNode(statementNode) {
    var bracketedStatementChildNode = bracketedStatementChildNodeFromStatementNode(statementNode);
    if (bracketedStatementChildNode !== null) {
        statementNode = bracketedStatementChildNode; ///
    }
    return statementNode;
}
function bracketedTermChildNodeFromTermNode(termNode) {
    var bracketedTermChildNode = null;
    var depth = _constants.BRACKETED_TERM_DEPTH, bracketedTermNode = _constructor.default.getBracketedTermNode(), termNodeMatchBracketedTermNode = termNode.match(bracketedTermNode, depth);
    if (termNodeMatchBracketedTermNode) {
        var singularTermNode = termNode.getSingularTermNode();
        bracketedTermChildNode = singularTermNode; ///
    }
    return bracketedTermChildNode;
}
function bracketedStatementChildNodeFromStatementNode(statementNode) {
    var bracketedStatementChildNode = null;
    var depth = _constants.BRACKETED_STATEMENT_DEPTH, bracketedStatementNode = _combinator.default.getBracketedStatementNode(), statementNodeMatchBracketedStatementNode = statementNode.match(bracketedStatementNode, depth);
    if (statementNodeMatchBracketedStatementNode) {
        var singularStatementNode = statementNode.getSingularStatementNode();
        bracketedStatementChildNode = singularStatementNode; ///
    }
    return bracketedStatementChildNode;
}
function contextFromReference(reference, context) {
    var referenceTokens = reference.getTokens(), tokens = referenceTokens, localContext = _local.default.fromContextAndTokens(context, tokens);
    context = localContext; ///
    return context;
}
function contextFromStatement(statement, context) {
    var statementTokens = statement.getTokens(), tokens = statementTokens, localContext = _local.default.fromContextAndTokens(context, tokens);
    context = localContext; ///
    return context;
}

//# sourceMappingURL=data:application/json;base64,