"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get bracketedStatementChildNodeFromStatementNode () {
        return bracketedStatementChildNodeFromStatementNode;
    },
    get bracketedTermChildNodeFromTermNode () {
        return bracketedTermChildNodeFromTermNode;
    },
    get stripBracketsFromStatement () {
        return stripBracketsFromStatement;
    },
    get stripBracketsFromStatementNode () {
        return stripBracketsFromStatementNode;
    },
    get stripBracketsFromTerm () {
        return stripBracketsFromTerm;
    },
    get stripBracketsFromTermNode () {
        return stripBracketsFromTermNode;
    }
});
var _dom = /*#__PURE__*/ _interop_require_default(require("../dom"));
var _local = /*#__PURE__*/ _interop_require_default(require("../context/local"));
var _combinator = /*#__PURE__*/ _interop_require_default(require("../context/bracketed/combinator"));
var _constructor = /*#__PURE__*/ _interop_require_default(require("../context/bracketed/constructor"));
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedTermChildNodeQuery = (0, _query.nodeQuery)("/term/argument/term"), bracketedStatementChildNodeQuery = (0, _query.nodeQuery)("/statement/metaArgument/statement");
function stripBracketsFromTerm(term, context) {
    var termNode = term.getNode(), bracketedTermChildNode = bracketedTermChildNodeFromTermNode(termNode);
    if (bracketedTermChildNode !== null) {
        var Term = _dom.default.Term, termNode1 = bracketedTermChildNode; ///
        term = Term.fromStatementNode(termNode1, context);
    }
    return term;
}
function stripBracketsFromStatement(statement, context) {
    var statementNode = statement.getNode(), bracketedStatementChildNode = bracketedStatementChildNodeFromStatementNode(statementNode);
    if (bracketedStatementChildNode !== null) {
        context = contextFromStatement(statement, context); ///
        var Statement = _dom.default.Statement, statementNode1 = bracketedStatementChildNode; ///
        statement = Statement.fromStatementNode(statementNode1, context);
    }
    return statement;
}
function stripBracketsFromTermNode(termNode) {
    var bracketedTermChildNode = bracketedTermChildNodeFromTermNode(termNode);
    if (bracketedTermChildNode !== null) {
        termNode = bracketedTermChildNode; ///
    }
    return termNode;
}
function stripBracketsFromStatementNode(statementNode) {
    var bracketedStatementChildNode = bracketedStatementChildNodeFromStatementNode(statementNode);
    if (bracketedStatementChildNode !== null) {
        statementNode = bracketedStatementChildNode; ///
    }
    return statementNode;
}
function bracketedTermChildNodeFromTermNode(termNode) {
    var bracketedTermChildNode = null;
    var depth = _constants.BRACKETED_TERM_DEPTH, bracketedTermNode = _constructor.default.getBracketedTermNode(), termNodeMatchBracketedTermNode = termNode.match(bracketedTermNode, depth);
    if (termNodeMatchBracketedTermNode) {
        bracketedTermChildNode = bracketedTermChildNodeQuery(termNode);
    }
    return bracketedTermChildNode;
}
function bracketedStatementChildNodeFromStatementNode(statementNode) {
    var bracketedStatementChildNode = null;
    var depth = _constants.BRACKETED_STATEMENT_DEPTH, bracketedStatementNode = _combinator.default.getBracketedStatementNode(), statementNodeMatchBracketedStatementNode = statementNode.match(bracketedStatementNode, depth);
    if (statementNodeMatchBracketedStatementNode) {
        bracketedStatementChildNode = bracketedStatementChildNodeQuery(statementNode);
    }
    return bracketedStatementChildNode;
}
function contextFromStatement(statement, context) {
    var statementTokens = statement.getTokens(), tokens = statementTokens, localContext = _local.default.fromContextAndTokens(context, tokens);
    context = localContext; ///
    return context;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvYnJhY2tldHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBkb20gZnJvbSBcIi4uL2RvbVwiO1xuaW1wb3J0IExvY2FsQ29udGV4dCBmcm9tIFwiLi4vY29udGV4dC9sb2NhbFwiO1xuaW1wb3J0IGNvbWJpbmF0b3JCcmFja2V0ZWRDb250ZXh0IGZyb20gXCIuLi9jb250ZXh0L2JyYWNrZXRlZC9jb21iaW5hdG9yXCI7XG5pbXBvcnQgY29uc3RydWN0b3JCcmFja2V0ZWRDb250ZXh0IGZyb20gXCIuLi9jb250ZXh0L2JyYWNrZXRlZC9jb25zdHJ1Y3RvclwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5pbXBvcnQgeyBCUkFDS0VURURfVEVSTV9ERVBUSCwgQlJBQ0tFVEVEX1NUQVRFTUVOVF9ERVBUSCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuY29uc3QgYnJhY2tldGVkVGVybUNoaWxkTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3Rlcm0vYXJndW1lbnQvdGVybVwiKSxcbiAgICAgIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3N0YXRlbWVudC9tZXRhQXJndW1lbnQvc3RhdGVtZW50XCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBCcmFja2V0c0Zyb21UZXJtKHRlcm0sIGNvbnRleHQpIHtcbiAgY29uc3QgdGVybU5vZGUgPSB0ZXJtLmdldE5vZGUoKSxcbiAgICAgICAgYnJhY2tldGVkVGVybUNoaWxkTm9kZSA9IGJyYWNrZXRlZFRlcm1DaGlsZE5vZGVGcm9tVGVybU5vZGUodGVybU5vZGUpO1xuXG4gIGlmIChicmFja2V0ZWRUZXJtQ2hpbGROb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgeyBUZXJtIH0gPSBkb20sXG4gICAgICAgICAgdGVybU5vZGUgPSBicmFja2V0ZWRUZXJtQ2hpbGROb2RlOyAgLy8vXG5cbiAgICB0ZXJtID0gVGVybS5mcm9tU3RhdGVtZW50Tm9kZSh0ZXJtTm9kZSwgY29udGV4dCk7XG4gIH1cblxuICByZXR1cm4gdGVybTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwQnJhY2tldHNGcm9tU3RhdGVtZW50KHN0YXRlbWVudCwgY29udGV4dCkge1xuICBjb25zdCBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50LmdldE5vZGUoKSxcbiAgICAgICAgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlID0gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSk7XG5cbiAgaWYgKGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnRleHQgPSBjb250ZXh0RnJvbVN0YXRlbWVudChzdGF0ZW1lbnQsIGNvbnRleHQpOyAvLy9cblxuICAgIGNvbnN0IHsgU3RhdGVtZW50IH0gPSBkb20sXG4gICAgICAgICAgc3RhdGVtZW50Tm9kZSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZTsgIC8vL1xuXG4gICAgc3RhdGVtZW50ID0gU3RhdGVtZW50LmZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUsIGNvbnRleHQpO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlbWVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwQnJhY2tldHNGcm9tVGVybU5vZGUodGVybU5vZGUpIHtcbiAgY29uc3QgYnJhY2tldGVkVGVybUNoaWxkTm9kZSA9IGJyYWNrZXRlZFRlcm1DaGlsZE5vZGVGcm9tVGVybU5vZGUodGVybU5vZGUpO1xuXG4gIGlmIChicmFja2V0ZWRUZXJtQ2hpbGROb2RlICE9PSBudWxsKSB7XG4gICAgdGVybU5vZGUgPSBicmFja2V0ZWRUZXJtQ2hpbGROb2RlOyAgLy8vXG4gIH1cblxuICByZXR1cm4gdGVybU5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEJyYWNrZXRzRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSkge1xuICBjb25zdCBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGUgPSBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVGcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlKTtcblxuICBpZiAoYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlICE9PSBudWxsKSB7XG4gICAgc3RhdGVtZW50Tm9kZSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZTsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlbWVudE5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicmFja2V0ZWRUZXJtQ2hpbGROb2RlRnJvbVRlcm1Ob2RlKHRlcm1Ob2RlKSB7XG4gIGxldCBicmFja2V0ZWRUZXJtQ2hpbGROb2RlID0gbnVsbDtcblxuICBjb25zdCBkZXB0aCA9IEJSQUNLRVRFRF9URVJNX0RFUFRILFxuICAgICAgICBicmFja2V0ZWRUZXJtTm9kZSA9IGNvbnN0cnVjdG9yQnJhY2tldGVkQ29udGV4dC5nZXRCcmFja2V0ZWRUZXJtTm9kZSgpLFxuICAgICAgICB0ZXJtTm9kZU1hdGNoQnJhY2tldGVkVGVybU5vZGUgPSB0ZXJtTm9kZS5tYXRjaChicmFja2V0ZWRUZXJtTm9kZSwgZGVwdGgpO1xuXG4gIGlmICh0ZXJtTm9kZU1hdGNoQnJhY2tldGVkVGVybU5vZGUpIHtcbiAgICBicmFja2V0ZWRUZXJtQ2hpbGROb2RlID0gYnJhY2tldGVkVGVybUNoaWxkTm9kZVF1ZXJ5KHRlcm1Ob2RlKTtcbiAgfVxuXG4gIHJldHVybiBicmFja2V0ZWRUZXJtQ2hpbGROb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSkge1xuICBsZXQgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlID0gbnVsbDtcblxuICBjb25zdCBkZXB0aCA9IEJSQUNLRVRFRF9TVEFURU1FTlRfREVQVEgsXG4gICAgICAgIGJyYWNrZXRlZFN0YXRlbWVudE5vZGUgPSBjb21iaW5hdG9yQnJhY2tldGVkQ29udGV4dC5nZXRCcmFja2V0ZWRTdGF0ZW1lbnROb2RlKCksXG4gICAgICAgIHN0YXRlbWVudE5vZGVNYXRjaEJyYWNrZXRlZFN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnROb2RlLm1hdGNoKGJyYWNrZXRlZFN0YXRlbWVudE5vZGUsIGRlcHRoKTtcblxuICBpZiAoc3RhdGVtZW50Tm9kZU1hdGNoQnJhY2tldGVkU3RhdGVtZW50Tm9kZSkge1xuICAgIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5KHN0YXRlbWVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZTtcbn1cblxuZnVuY3Rpb24gY29udGV4dEZyb21TdGF0ZW1lbnQoc3RhdGVtZW50LCBjb250ZXh0KSB7XG4gIGNvbnN0IHN0YXRlbWVudFRva2VucyA9IHN0YXRlbWVudC5nZXRUb2tlbnMoKSxcbiAgICB0b2tlbnMgPSBzdGF0ZW1lbnRUb2tlbnMsIC8vL1xuICAgIGxvY2FsQ29udGV4dCA9IExvY2FsQ29udGV4dC5mcm9tQ29udGV4dEFuZFRva2Vucyhjb250ZXh0LCB0b2tlbnMpO1xuXG4gIGNvbnRleHQgPSBsb2NhbENvbnRleHQ7IC8vL1xuXG4gIHJldHVybiBjb250ZXh0O1xufVxuIl0sIm5hbWVzIjpbImJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUZyb21TdGF0ZW1lbnROb2RlIiwiYnJhY2tldGVkVGVybUNoaWxkTm9kZUZyb21UZXJtTm9kZSIsInN0cmlwQnJhY2tldHNGcm9tU3RhdGVtZW50Iiwic3RyaXBCcmFja2V0c0Zyb21TdGF0ZW1lbnROb2RlIiwic3RyaXBCcmFja2V0c0Zyb21UZXJtIiwic3RyaXBCcmFja2V0c0Zyb21UZXJtTm9kZSIsImJyYWNrZXRlZFRlcm1DaGlsZE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsImJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5IiwidGVybSIsImNvbnRleHQiLCJ0ZXJtTm9kZSIsImdldE5vZGUiLCJicmFja2V0ZWRUZXJtQ2hpbGROb2RlIiwiVGVybSIsImRvbSIsImZyb21TdGF0ZW1lbnROb2RlIiwic3RhdGVtZW50Iiwic3RhdGVtZW50Tm9kZSIsImJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZSIsImNvbnRleHRGcm9tU3RhdGVtZW50IiwiU3RhdGVtZW50IiwiZGVwdGgiLCJCUkFDS0VURURfVEVSTV9ERVBUSCIsImJyYWNrZXRlZFRlcm1Ob2RlIiwiY29uc3RydWN0b3JCcmFja2V0ZWRDb250ZXh0IiwiZ2V0QnJhY2tldGVkVGVybU5vZGUiLCJ0ZXJtTm9kZU1hdGNoQnJhY2tldGVkVGVybU5vZGUiLCJtYXRjaCIsIkJSQUNLRVRFRF9TVEFURU1FTlRfREVQVEgiLCJicmFja2V0ZWRTdGF0ZW1lbnROb2RlIiwiY29tYmluYXRvckJyYWNrZXRlZENvbnRleHQiLCJnZXRCcmFja2V0ZWRTdGF0ZW1lbnROb2RlIiwic3RhdGVtZW50Tm9kZU1hdGNoQnJhY2tldGVkU3RhdGVtZW50Tm9kZSIsInN0YXRlbWVudFRva2VucyIsImdldFRva2VucyIsInRva2VucyIsImxvY2FsQ29udGV4dCIsIkxvY2FsQ29udGV4dCIsImZyb21Db250ZXh0QW5kVG9rZW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7UUE2RWdCQTtlQUFBQTs7UUFkQUM7ZUFBQUE7O1FBcENBQztlQUFBQTs7UUEwQkFDO2VBQUFBOztRQXhDQUM7ZUFBQUE7O1FBOEJBQztlQUFBQTs7OzBEQXpDQTs0REFDUztpRUFDYztrRUFDQztxQkFFZDt5QkFDc0M7Ozs7OztBQUVoRSxJQUFNQyw4QkFBOEJDLElBQUFBLGdCQUFTLEVBQUMsd0JBQ3hDQyxtQ0FBbUNELElBQUFBLGdCQUFTLEVBQUM7QUFFNUMsU0FBU0gsc0JBQXNCSyxJQUFJLEVBQUVDLE9BQU87SUFDakQsSUFBTUMsV0FBV0YsS0FBS0csT0FBTyxJQUN2QkMseUJBQXlCWixtQ0FBbUNVO0lBRWxFLElBQUlFLDJCQUEyQixNQUFNO1FBQ25DLElBQU0sQUFBRUMsT0FBU0MsWUFBRyxDQUFaRCxNQUNGSCxZQUFXRSx3QkFBeUIsR0FBRztRQUU3Q0osT0FBT0ssS0FBS0UsaUJBQWlCLENBQUNMLFdBQVVEO0lBQzFDO0lBRUEsT0FBT0Q7QUFDVDtBQUVPLFNBQVNQLDJCQUEyQmUsU0FBUyxFQUFFUCxPQUFPO0lBQzNELElBQU1RLGdCQUFnQkQsVUFBVUwsT0FBTyxJQUNqQ08sOEJBQThCbkIsNkNBQTZDa0I7SUFFakYsSUFBSUMsZ0NBQWdDLE1BQU07UUFDeENULFVBQVVVLHFCQUFxQkgsV0FBV1AsVUFBVSxHQUFHO1FBRXZELElBQU0sQUFBRVcsWUFBY04sWUFBRyxDQUFqQk0sV0FDRkgsaUJBQWdCQyw2QkFBOEIsR0FBRztRQUV2REYsWUFBWUksVUFBVUwsaUJBQWlCLENBQUNFLGdCQUFlUjtJQUN6RDtJQUVBLE9BQU9PO0FBQ1Q7QUFFTyxTQUFTWiwwQkFBMEJNLFFBQVE7SUFDaEQsSUFBTUUseUJBQXlCWixtQ0FBbUNVO0lBRWxFLElBQUlFLDJCQUEyQixNQUFNO1FBQ25DRixXQUFXRSx3QkFBeUIsR0FBRztJQUN6QztJQUVBLE9BQU9GO0FBQ1Q7QUFFTyxTQUFTUiwrQkFBK0JlLGFBQWE7SUFDMUQsSUFBTUMsOEJBQThCbkIsNkNBQTZDa0I7SUFFakYsSUFBSUMsZ0NBQWdDLE1BQU07UUFDeENELGdCQUFnQkMsNkJBQThCLEdBQUc7SUFDbkQ7SUFFQSxPQUFPRDtBQUNUO0FBRU8sU0FBU2pCLG1DQUFtQ1UsUUFBUTtJQUN6RCxJQUFJRSx5QkFBeUI7SUFFN0IsSUFBTVMsUUFBUUMsK0JBQW9CLEVBQzVCQyxvQkFBb0JDLG9CQUEyQixDQUFDQyxvQkFBb0IsSUFDcEVDLGlDQUFpQ2hCLFNBQVNpQixLQUFLLENBQUNKLG1CQUFtQkY7SUFFekUsSUFBSUssZ0NBQWdDO1FBQ2xDZCx5QkFBeUJQLDRCQUE0Qks7SUFDdkQ7SUFFQSxPQUFPRTtBQUNUO0FBRU8sU0FBU2IsNkNBQTZDa0IsYUFBYTtJQUN4RSxJQUFJQyw4QkFBOEI7SUFFbEMsSUFBTUcsUUFBUU8sb0NBQXlCLEVBQ2pDQyx5QkFBeUJDLG1CQUEwQixDQUFDQyx5QkFBeUIsSUFDN0VDLDJDQUEyQ2YsY0FBY1UsS0FBSyxDQUFDRSx3QkFBd0JSO0lBRTdGLElBQUlXLDBDQUEwQztRQUM1Q2QsOEJBQThCWCxpQ0FBaUNVO0lBQ2pFO0lBRUEsT0FBT0M7QUFDVDtBQUVBLFNBQVNDLHFCQUFxQkgsU0FBUyxFQUFFUCxPQUFPO0lBQzlDLElBQU13QixrQkFBa0JqQixVQUFVa0IsU0FBUyxJQUN6Q0MsU0FBU0YsaUJBQ1RHLGVBQWVDLGNBQVksQ0FBQ0Msb0JBQW9CLENBQUM3QixTQUFTMEI7SUFFNUQxQixVQUFVMkIsY0FBYyxHQUFHO0lBRTNCLE9BQU8zQjtBQUNUIn0=