"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "subproofStringFromSubproofNode", {
    enumerable: true,
    get: function() {
        return subproofStringFromSubproofNode;
    }
});
function subproofStringFromSubproofNode(subproofNode, fileContext) {
    var suppositionStatementsOrNonsenseString = suppositionStatementOrNonsenseStringFromSubproofNode(subproofNode, fileContext), lastStatementOrNonsenseString = lastStatementOrNonsenseStringFromSubproofNode(subproofNode, fileContext), subproofString = "[".concat(suppositionStatementsOrNonsenseString, "] ... ").concat(lastStatementOrNonsenseString);
    return subproofString;
}
function suppositionStatementOrNonsenseStringFromSubproofNode(subproofNode, fileContext) {
    var suppositionNodes = subproofNode.getSuppositionNodes(), suppositionStatementsOrNonsenseString = suppositionNodes.reduce(function(suppositionStatementsOrNonsenseString, suppositionNode) {
        var suppositionOrStepNode = suppositionNode, statementOrNonsenseString = statementOrNonsenseStringFromSuppositionOrStepNode(suppositionOrStepNode, fileContext), suppositionStatementOrNonsenseString = statementOrNonsenseString; ///
        suppositionStatementsOrNonsenseString = suppositionStatementsOrNonsenseString !== null ? "".concat(suppositionStatementsOrNonsenseString, ", ").concat(suppositionStatementOrNonsenseString) : suppositionStatementOrNonsenseString; ///
        return suppositionStatementsOrNonsenseString;
    }, null);
    return suppositionStatementsOrNonsenseString;
}
function lastStatementOrNonsenseStringFromSubproofNode(subproofNode, fileContext) {
    var lastStepNode = subproofNode.getLastStepNode(), suppositionOrStepNode = lastStepNode, statementOrNonsenseString = statementOrNonsenseStringFromSuppositionOrStepNode(suppositionOrStepNode, fileContext), lastStatementOrNonsenseString = statementOrNonsenseString; ///
    return lastStatementOrNonsenseString;
}
function statementOrNonsenseStringFromSuppositionOrStepNode(suppositionOrStepNode, fileContext) {
    var statementOrNonsenseString;
    var nonsenseNode = suppositionOrStepNode.getNonsenseNode(), statementNode = suppositionOrStepNode.getStatementNode();
    if (false) {
    ///
    } else if (nonsenseNode !== null) {
        var nonsenseString = fileContext.nodeAsString(nonsenseNode);
        statementOrNonsenseString = nonsenseString; ///
    } else if (statementNode !== null) {
        var statementString = fileContext.nodeAsString(statementNode);
        statementOrNonsenseString = statementString; ///
    }
    return statementOrNonsenseString;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvc3VicHJvb2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJwcm9vZlN0cmluZ0Zyb21TdWJwcm9vZk5vZGUoc3VicHJvb2ZOb2RlLCBmaWxlQ29udGV4dCkge1xuICBjb25zdCBzdXBwb3NpdGlvblN0YXRlbWVudHNPck5vbnNlbnNlU3RyaW5nID0gc3VwcG9zaXRpb25TdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nRnJvbVN1YnByb29mTm9kZShzdWJwcm9vZk5vZGUsIGZpbGVDb250ZXh0KSxcbiAgICAgICAgbGFzdFN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmcgPSBsYXN0U3RhdGVtZW50T3JOb25zZW5zZVN0cmluZ0Zyb21TdWJwcm9vZk5vZGUoc3VicHJvb2ZOb2RlLCBmaWxlQ29udGV4dCksXG4gICAgICAgIHN1YnByb29mU3RyaW5nID0gYFske3N1cHBvc2l0aW9uU3RhdGVtZW50c09yTm9uc2Vuc2VTdHJpbmd9XSAuLi4gJHtsYXN0U3RhdGVtZW50T3JOb25zZW5zZVN0cmluZ31gO1xuXG4gIHJldHVybiBzdWJwcm9vZlN0cmluZztcbn1cblxuZnVuY3Rpb24gc3VwcG9zaXRpb25TdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nRnJvbVN1YnByb29mTm9kZShzdWJwcm9vZk5vZGUsIGZpbGVDb250ZXh0KSB7XG4gIGNvbnN0IHN1cHBvc2l0aW9uTm9kZXMgPSBzdWJwcm9vZk5vZGUuZ2V0U3VwcG9zaXRpb25Ob2RlcygpLFxuICAgICAgICBzdXBwb3NpdGlvblN0YXRlbWVudHNPck5vbnNlbnNlU3RyaW5nID0gc3VwcG9zaXRpb25Ob2Rlcy5yZWR1Y2UoKHN1cHBvc2l0aW9uU3RhdGVtZW50c09yTm9uc2Vuc2VTdHJpbmcsIHN1cHBvc2l0aW9uTm9kZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN1cHBvc2l0aW9uT3JTdGVwTm9kZSA9IHN1cHBvc2l0aW9uTm9kZSwgIC8vL1xuICAgICAgICAgICAgICAgIHN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmcgPSBzdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nRnJvbVN1cHBvc2l0aW9uT3JTdGVwTm9kZShzdXBwb3NpdGlvbk9yU3RlcE5vZGUsIGZpbGVDb250ZXh0KSxcbiAgICAgICAgICAgICAgICBzdXBwb3NpdGlvblN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmcgPSBzdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nOyAvLy9cblxuICAgICAgICAgIHN1cHBvc2l0aW9uU3RhdGVtZW50c09yTm9uc2Vuc2VTdHJpbmcgPSAoc3VwcG9zaXRpb25TdGF0ZW1lbnRzT3JOb25zZW5zZVN0cmluZyAhPT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3N1cHBvc2l0aW9uU3RhdGVtZW50c09yTm9uc2Vuc2VTdHJpbmd9LCAke3N1cHBvc2l0aW9uU3RhdGVtZW50T3JOb25zZW5zZVN0cmluZ31gIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBvc2l0aW9uU3RhdGVtZW50T3JOb25zZW5zZVN0cmluZzsgLy8vXG5cbiAgICAgICAgICByZXR1cm4gc3VwcG9zaXRpb25TdGF0ZW1lbnRzT3JOb25zZW5zZVN0cmluZztcbiAgICAgICAgfSwgbnVsbCk7XG5cbiAgcmV0dXJuIHN1cHBvc2l0aW9uU3RhdGVtZW50c09yTm9uc2Vuc2VTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGxhc3RTdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nRnJvbVN1YnByb29mTm9kZShzdWJwcm9vZk5vZGUsIGZpbGVDb250ZXh0KSB7XG4gIGNvbnN0IGxhc3RTdGVwTm9kZSA9IHN1YnByb29mTm9kZS5nZXRMYXN0U3RlcE5vZGUoKSxcbiAgICAgICAgc3VwcG9zaXRpb25PclN0ZXBOb2RlID0gbGFzdFN0ZXBOb2RlLCAvLy9cbiAgICAgICAgc3RhdGVtZW50T3JOb25zZW5zZVN0cmluZyA9IHN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmdGcm9tU3VwcG9zaXRpb25PclN0ZXBOb2RlKHN1cHBvc2l0aW9uT3JTdGVwTm9kZSwgZmlsZUNvbnRleHQpLFxuICAgICAgICBsYXN0U3RhdGVtZW50T3JOb25zZW5zZVN0cmluZyA9IHN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmc7IC8vL1xuXG4gIHJldHVybiBsYXN0U3RhdGVtZW50T3JOb25zZW5zZVN0cmluZztcbn1cblxuZnVuY3Rpb24gc3RhdGVtZW50T3JOb25zZW5zZVN0cmluZ0Zyb21TdXBwb3NpdGlvbk9yU3RlcE5vZGUoc3VwcG9zaXRpb25PclN0ZXBOb2RlLCBmaWxlQ29udGV4dCkge1xuICBsZXQgc3RhdGVtZW50T3JOb25zZW5zZVN0cmluZztcblxuICBjb25zdCBub25zZW5zZU5vZGUgPSBzdXBwb3NpdGlvbk9yU3RlcE5vZGUuZ2V0Tm9uc2Vuc2VOb2RlKCksXG4gICAgICAgIHN0YXRlbWVudE5vZGUgPSBzdXBwb3NpdGlvbk9yU3RlcE5vZGUuZ2V0U3RhdGVtZW50Tm9kZSgpO1xuXG4gIGlmIChmYWxzZSkge1xuICAgIC8vL1xuICB9IGVsc2UgaWYgKG5vbnNlbnNlTm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IG5vbnNlbnNlU3RyaW5nID0gZmlsZUNvbnRleHQubm9kZUFzU3RyaW5nKG5vbnNlbnNlTm9kZSk7XG5cbiAgICBzdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nID0gbm9uc2Vuc2VTdHJpbmc7IC8vL1xuICB9IGVsc2UgaWYgKHN0YXRlbWVudE5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBzdGF0ZW1lbnRTdHJpbmcgPSBmaWxlQ29udGV4dC5ub2RlQXNTdHJpbmcoc3RhdGVtZW50Tm9kZSk7XG5cbiAgICBzdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nID0gc3RhdGVtZW50U3RyaW5nOyAgLy8vXG4gIH1cblxuICByZXR1cm4gc3RhdGVtZW50T3JOb25zZW5zZVN0cmluZztcbn0iXSwibmFtZXMiOlsic3VicHJvb2ZTdHJpbmdGcm9tU3VicHJvb2ZOb2RlIiwic3VicHJvb2ZOb2RlIiwiZmlsZUNvbnRleHQiLCJzdXBwb3NpdGlvblN0YXRlbWVudHNPck5vbnNlbnNlU3RyaW5nIiwic3VwcG9zaXRpb25TdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nRnJvbVN1YnByb29mTm9kZSIsImxhc3RTdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nIiwibGFzdFN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmdGcm9tU3VicHJvb2ZOb2RlIiwic3VicHJvb2ZTdHJpbmciLCJzdXBwb3NpdGlvbk5vZGVzIiwiZ2V0U3VwcG9zaXRpb25Ob2RlcyIsInJlZHVjZSIsInN1cHBvc2l0aW9uTm9kZSIsInN1cHBvc2l0aW9uT3JTdGVwTm9kZSIsInN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmciLCJzdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nRnJvbVN1cHBvc2l0aW9uT3JTdGVwTm9kZSIsInN1cHBvc2l0aW9uU3RhdGVtZW50T3JOb25zZW5zZVN0cmluZyIsImxhc3RTdGVwTm9kZSIsImdldExhc3RTdGVwTm9kZSIsIm5vbnNlbnNlTm9kZSIsImdldE5vbnNlbnNlTm9kZSIsInN0YXRlbWVudE5vZGUiLCJnZXRTdGF0ZW1lbnROb2RlIiwibm9uc2Vuc2VTdHJpbmciLCJub2RlQXNTdHJpbmciLCJzdGF0ZW1lbnRTdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQUVnQkE7OztlQUFBQTs7O0FBQVQsU0FBU0EsK0JBQStCQyxZQUFZLEVBQUVDLFdBQVc7SUFDdEUsSUFBTUMsd0NBQXdDQyxxREFBcURILGNBQWNDLGNBQzNHRyxnQ0FBZ0NDLDhDQUE4Q0wsY0FBY0MsY0FDNUZLLGlCQUFpQixBQUFDLElBQWlERixPQUE5Q0YsdUNBQXNDLFVBQXNDLE9BQTlCRTtJQUV6RSxPQUFPRTtBQUNUO0FBRUEsU0FBU0gscURBQXFESCxZQUFZLEVBQUVDLFdBQVc7SUFDckYsSUFBTU0sbUJBQW1CUCxhQUFhUSxtQkFBbUIsSUFDbkROLHdDQUF3Q0ssaUJBQWlCRSxNQUFNLENBQUMsU0FBQ1AsdUNBQXVDUTtRQUN0RyxJQUFNQyx3QkFBd0JELGlCQUN4QkUsNEJBQTRCQyxtREFBbURGLHVCQUF1QlYsY0FDdEdhLHVDQUF1Q0YsMkJBQTJCLEdBQUc7UUFFM0VWLHdDQUF3QyxBQUFDQSwwQ0FBMEMsT0FDekMsQUFBQyxHQUE0Q1ksT0FBMUNaLHVDQUFzQyxNQUF5QyxPQUFyQ1ksd0NBQzNDQSxzQ0FBc0MsR0FBRztRQUVyRixPQUFPWjtJQUNULEdBQUc7SUFFVCxPQUFPQTtBQUNUO0FBRUEsU0FBU0csOENBQThDTCxZQUFZLEVBQUVDLFdBQVc7SUFDOUUsSUFBTWMsZUFBZWYsYUFBYWdCLGVBQWUsSUFDM0NMLHdCQUF3QkksY0FDeEJILDRCQUE0QkMsbURBQW1ERix1QkFBdUJWLGNBQ3RHRyxnQ0FBZ0NRLDJCQUEyQixHQUFHO0lBRXBFLE9BQU9SO0FBQ1Q7QUFFQSxTQUFTUyxtREFBbURGLHFCQUFxQixFQUFFVixXQUFXO0lBQzVGLElBQUlXO0lBRUosSUFBTUssZUFBZU4sc0JBQXNCTyxlQUFlLElBQ3BEQyxnQkFBZ0JSLHNCQUFzQlMsZ0JBQWdCO0lBRTVELElBQUksT0FBTztJQUNULEdBQUc7SUFDTCxPQUFPLElBQUlILGlCQUFpQixNQUFNO1FBQ2hDLElBQU1JLGlCQUFpQnBCLFlBQVlxQixZQUFZLENBQUNMO1FBRWhETCw0QkFBNEJTLGdCQUFnQixHQUFHO0lBQ2pELE9BQU8sSUFBSUYsa0JBQWtCLE1BQU07UUFDakMsSUFBTUksa0JBQWtCdEIsWUFBWXFCLFlBQVksQ0FBQ0g7UUFFakRQLDRCQUE0QlcsaUJBQWtCLEdBQUc7SUFDbkQ7SUFFQSxPQUFPWDtBQUNUIn0=