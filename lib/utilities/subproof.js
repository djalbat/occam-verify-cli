"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "subproofStringFromSubproofNode", {
    enumerable: true,
    get: function() {
        return subproofStringFromSubproofNode;
    }
});
function subproofStringFromSubproofNode(subproofNode, fileContext) {
    var suppositionStatementsOrNonsenseString = suppositionStatementOrNonsenseStringFromSubproofNode(subproofNode, fileContext), lastStatementOrNonsenseString = lastStatementOrNonsenseStringFromSubproofNode(subproofNode, fileContext), subproofString = "[".concat(suppositionStatementsOrNonsenseString, "]...").concat(lastStatementOrNonsenseString);
    return subproofString;
}
function suppositionStatementOrNonsenseStringFromSubproofNode(subproofNode, fileContext) {
    var suppositionNodes = subproofNode.getSuppositionNodes(), suppositionStatementsOrNonsenseString = suppositionNodes.reduce(function(suppositionStatementsOrNonsenseString, suppositionNode) {
        var suppositionOrStepNode = suppositionNode, statementOrNonsenseString = statementOrNonsenseStringFromSuppositionOrStepNode(suppositionOrStepNode, fileContext), suppositionStatementOrNonsenseString = statementOrNonsenseString; ///
        suppositionStatementsOrNonsenseString = suppositionStatementsOrNonsenseString !== null ? "".concat(suppositionStatementsOrNonsenseString, ", ").concat(suppositionStatementOrNonsenseString) : suppositionStatementOrNonsenseString; ///
        return suppositionStatementsOrNonsenseString;
    }, null);
    return suppositionStatementsOrNonsenseString;
}
function lastStatementOrNonsenseStringFromSubproofNode(subproofNode, fileContext) {
    var lastStepNode = subproofNode.getLastStepNode(), suppositionOrStepNode = lastStepNode, statementOrNonsenseString = statementOrNonsenseStringFromSuppositionOrStepNode(suppositionOrStepNode, fileContext), lastStatementOrNonsenseString = statementOrNonsenseString; ///
    return lastStatementOrNonsenseString;
}
function statementOrNonsenseStringFromSuppositionOrStepNode(suppositionOrStepNode, fileContext) {
    var statementOrNonsenseString;
    var nonsenseNode = suppositionOrStepNode.getNonsenseNode(), statementNode = suppositionOrStepNode.getStatementNode();
    if (false) {
    ///
    } else if (nonsenseNode !== null) {
        var nonsenseString = fileContext.nodeAsString(nonsenseNode);
        statementOrNonsenseString = nonsenseString; ///
    } else if (statementNode !== null) {
        var statementString = fileContext.nodeAsString(statementNode);
        statementOrNonsenseString = statementString; ///
    }
    return statementOrNonsenseString;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvc3VicHJvb2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJwcm9vZlN0cmluZ0Zyb21TdWJwcm9vZk5vZGUoc3VicHJvb2ZOb2RlLCBmaWxlQ29udGV4dCkge1xuICBjb25zdCBzdXBwb3NpdGlvblN0YXRlbWVudHNPck5vbnNlbnNlU3RyaW5nID0gc3VwcG9zaXRpb25TdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nRnJvbVN1YnByb29mTm9kZShzdWJwcm9vZk5vZGUsIGZpbGVDb250ZXh0KSxcbiAgICAgICAgbGFzdFN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmcgPSBsYXN0U3RhdGVtZW50T3JOb25zZW5zZVN0cmluZ0Zyb21TdWJwcm9vZk5vZGUoc3VicHJvb2ZOb2RlLCBmaWxlQ29udGV4dCksXG4gICAgICAgIHN1YnByb29mU3RyaW5nID0gYFske3N1cHBvc2l0aW9uU3RhdGVtZW50c09yTm9uc2Vuc2VTdHJpbmd9XS4uLiR7bGFzdFN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmd9YDtcblxuICByZXR1cm4gc3VicHJvb2ZTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHN1cHBvc2l0aW9uU3RhdGVtZW50T3JOb25zZW5zZVN0cmluZ0Zyb21TdWJwcm9vZk5vZGUoc3VicHJvb2ZOb2RlLCBmaWxlQ29udGV4dCkge1xuICBjb25zdCBzdXBwb3NpdGlvbk5vZGVzID0gc3VicHJvb2ZOb2RlLmdldFN1cHBvc2l0aW9uTm9kZXMoKSxcbiAgICAgICAgc3VwcG9zaXRpb25TdGF0ZW1lbnRzT3JOb25zZW5zZVN0cmluZyA9IHN1cHBvc2l0aW9uTm9kZXMucmVkdWNlKChzdXBwb3NpdGlvblN0YXRlbWVudHNPck5vbnNlbnNlU3RyaW5nLCBzdXBwb3NpdGlvbk5vZGUpID0+IHtcbiAgICAgICAgICBjb25zdCBzdXBwb3NpdGlvbk9yU3RlcE5vZGUgPSBzdXBwb3NpdGlvbk5vZGUsICAvLy9cbiAgICAgICAgICAgICAgICBzdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nID0gc3RhdGVtZW50T3JOb25zZW5zZVN0cmluZ0Zyb21TdXBwb3NpdGlvbk9yU3RlcE5vZGUoc3VwcG9zaXRpb25PclN0ZXBOb2RlLCBmaWxlQ29udGV4dCksXG4gICAgICAgICAgICAgICAgc3VwcG9zaXRpb25TdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nID0gc3RhdGVtZW50T3JOb25zZW5zZVN0cmluZzsgLy8vXG5cbiAgICAgICAgICBzdXBwb3NpdGlvblN0YXRlbWVudHNPck5vbnNlbnNlU3RyaW5nID0gKHN1cHBvc2l0aW9uU3RhdGVtZW50c09yTm9uc2Vuc2VTdHJpbmcgIT09IG51bGwpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtzdXBwb3NpdGlvblN0YXRlbWVudHNPck5vbnNlbnNlU3RyaW5nfSwgJHtzdXBwb3NpdGlvblN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmd9YCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBwb3NpdGlvblN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmc7IC8vL1xuXG4gICAgICAgICAgcmV0dXJuIHN1cHBvc2l0aW9uU3RhdGVtZW50c09yTm9uc2Vuc2VTdHJpbmc7XG4gICAgICAgIH0sIG51bGwpO1xuXG4gIHJldHVybiBzdXBwb3NpdGlvblN0YXRlbWVudHNPck5vbnNlbnNlU3RyaW5nO1xufVxuXG5mdW5jdGlvbiBsYXN0U3RhdGVtZW50T3JOb25zZW5zZVN0cmluZ0Zyb21TdWJwcm9vZk5vZGUoc3VicHJvb2ZOb2RlLCBmaWxlQ29udGV4dCkge1xuICBjb25zdCBsYXN0U3RlcE5vZGUgPSBzdWJwcm9vZk5vZGUuZ2V0TGFzdFN0ZXBOb2RlKCksXG4gICAgICAgIHN1cHBvc2l0aW9uT3JTdGVwTm9kZSA9IGxhc3RTdGVwTm9kZSwgLy8vXG4gICAgICAgIHN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmcgPSBzdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nRnJvbVN1cHBvc2l0aW9uT3JTdGVwTm9kZShzdXBwb3NpdGlvbk9yU3RlcE5vZGUsIGZpbGVDb250ZXh0KSxcbiAgICAgICAgbGFzdFN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmcgPSBzdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nOyAvLy9cblxuICByZXR1cm4gbGFzdFN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmdGcm9tU3VwcG9zaXRpb25PclN0ZXBOb2RlKHN1cHBvc2l0aW9uT3JTdGVwTm9kZSwgZmlsZUNvbnRleHQpIHtcbiAgbGV0IHN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmc7XG5cbiAgY29uc3Qgbm9uc2Vuc2VOb2RlID0gc3VwcG9zaXRpb25PclN0ZXBOb2RlLmdldE5vbnNlbnNlTm9kZSgpLFxuICAgICAgICBzdGF0ZW1lbnROb2RlID0gc3VwcG9zaXRpb25PclN0ZXBOb2RlLmdldFN0YXRlbWVudE5vZGUoKTtcblxuICBpZiAoZmFsc2UpIHtcbiAgICAvLy9cbiAgfSBlbHNlIGlmIChub25zZW5zZU5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBub25zZW5zZVN0cmluZyA9IGZpbGVDb250ZXh0Lm5vZGVBc1N0cmluZyhub25zZW5zZU5vZGUpO1xuXG4gICAgc3RhdGVtZW50T3JOb25zZW5zZVN0cmluZyA9IG5vbnNlbnNlU3RyaW5nOyAvLy9cbiAgfSBlbHNlIGlmIChzdGF0ZW1lbnROb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3RhdGVtZW50U3RyaW5nID0gZmlsZUNvbnRleHQubm9kZUFzU3RyaW5nKHN0YXRlbWVudE5vZGUpO1xuXG4gICAgc3RhdGVtZW50T3JOb25zZW5zZVN0cmluZyA9IHN0YXRlbWVudFN0cmluZzsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmc7XG59Il0sIm5hbWVzIjpbInN1YnByb29mU3RyaW5nRnJvbVN1YnByb29mTm9kZSIsInN1YnByb29mTm9kZSIsImZpbGVDb250ZXh0Iiwic3VwcG9zaXRpb25TdGF0ZW1lbnRzT3JOb25zZW5zZVN0cmluZyIsInN1cHBvc2l0aW9uU3RhdGVtZW50T3JOb25zZW5zZVN0cmluZ0Zyb21TdWJwcm9vZk5vZGUiLCJsYXN0U3RhdGVtZW50T3JOb25zZW5zZVN0cmluZyIsImxhc3RTdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nRnJvbVN1YnByb29mTm9kZSIsInN1YnByb29mU3RyaW5nIiwic3VwcG9zaXRpb25Ob2RlcyIsImdldFN1cHBvc2l0aW9uTm9kZXMiLCJyZWR1Y2UiLCJzdXBwb3NpdGlvbk5vZGUiLCJzdXBwb3NpdGlvbk9yU3RlcE5vZGUiLCJzdGF0ZW1lbnRPck5vbnNlbnNlU3RyaW5nIiwic3RhdGVtZW50T3JOb25zZW5zZVN0cmluZ0Zyb21TdXBwb3NpdGlvbk9yU3RlcE5vZGUiLCJzdXBwb3NpdGlvblN0YXRlbWVudE9yTm9uc2Vuc2VTdHJpbmciLCJsYXN0U3RlcE5vZGUiLCJnZXRMYXN0U3RlcE5vZGUiLCJub25zZW5zZU5vZGUiLCJnZXROb25zZW5zZU5vZGUiLCJzdGF0ZW1lbnROb2RlIiwiZ2V0U3RhdGVtZW50Tm9kZSIsIm5vbnNlbnNlU3RyaW5nIiwibm9kZUFzU3RyaW5nIiwic3RhdGVtZW50U3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFFZ0JBOzs7ZUFBQUE7OztBQUFULFNBQVNBLCtCQUErQkMsWUFBWSxFQUFFQyxXQUFXO0lBQ3RFLElBQU1DLHdDQUF3Q0MscURBQXFESCxjQUFjQyxjQUMzR0csZ0NBQWdDQyw4Q0FBOENMLGNBQWNDLGNBQzVGSyxpQkFBaUIsQUFBQyxJQUErQ0YsT0FBNUNGLHVDQUFzQyxRQUFvQyxPQUE5QkU7SUFFdkUsT0FBT0U7QUFDVDtBQUVBLFNBQVNILHFEQUFxREgsWUFBWSxFQUFFQyxXQUFXO0lBQ3JGLElBQU1NLG1CQUFtQlAsYUFBYVEsbUJBQW1CLElBQ25ETix3Q0FBd0NLLGlCQUFpQkUsTUFBTSxDQUFDLFNBQUNQLHVDQUF1Q1E7UUFDdEcsSUFBTUMsd0JBQXdCRCxpQkFDeEJFLDRCQUE0QkMsbURBQW1ERix1QkFBdUJWLGNBQ3RHYSx1Q0FBdUNGLDJCQUEyQixHQUFHO1FBRTNFVix3Q0FBd0MsQUFBQ0EsMENBQTBDLE9BQ3pDLEFBQUMsR0FBNENZLE9BQTFDWix1Q0FBc0MsTUFBeUMsT0FBckNZLHdDQUMzQ0Esc0NBQXNDLEdBQUc7UUFFckYsT0FBT1o7SUFDVCxHQUFHO0lBRVQsT0FBT0E7QUFDVDtBQUVBLFNBQVNHLDhDQUE4Q0wsWUFBWSxFQUFFQyxXQUFXO0lBQzlFLElBQU1jLGVBQWVmLGFBQWFnQixlQUFlLElBQzNDTCx3QkFBd0JJLGNBQ3hCSCw0QkFBNEJDLG1EQUFtREYsdUJBQXVCVixjQUN0R0csZ0NBQWdDUSwyQkFBMkIsR0FBRztJQUVwRSxPQUFPUjtBQUNUO0FBRUEsU0FBU1MsbURBQW1ERixxQkFBcUIsRUFBRVYsV0FBVztJQUM1RixJQUFJVztJQUVKLElBQU1LLGVBQWVOLHNCQUFzQk8sZUFBZSxJQUNwREMsZ0JBQWdCUixzQkFBc0JTLGdCQUFnQjtJQUU1RCxJQUFJLE9BQU87SUFDVCxHQUFHO0lBQ0wsT0FBTyxJQUFJSCxpQkFBaUIsTUFBTTtRQUNoQyxJQUFNSSxpQkFBaUJwQixZQUFZcUIsWUFBWSxDQUFDTDtRQUVoREwsNEJBQTRCUyxnQkFBZ0IsR0FBRztJQUNqRCxPQUFPLElBQUlGLGtCQUFrQixNQUFNO1FBQ2pDLElBQU1JLGtCQUFrQnRCLFlBQVlxQixZQUFZLENBQUNIO1FBRWpEUCw0QkFBNEJXLGlCQUFrQixHQUFHO0lBQ25EO0lBRUEsT0FBT1g7QUFDVCJ9