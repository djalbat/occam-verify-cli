"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "subproofStringFromSubproofNode", {
    enumerable: true,
    get: function() {
        return subproofStringFromSubproofNode;
    }
});
var _string = require("./string");
function subproofStringFromSubproofNode(subproofNode, fileContext) {
    var tokens = fileContext.getTokens(), suppositionStatementNodes = suppositionStatementNodesFromSubproofNode(subproofNode), lastStepStatementNode = lastStepStatementNodeFromSubproofNode(subproofNode), suppositionStatementsString = (0, _string.nodesAsString)(suppositionStatementNodes, tokens), lastStepStatementString = (0, _string.nodeAsString)(lastStepStatementNode, tokens), subproofString = "[".concat(suppositionStatementsString, "]...").concat(lastStepStatementString);
    return subproofString;
}
function lastStepStatementNodeFromSubproofNode(subproofNode) {
    var lastStepNode = subproofNode.getLastStepNode(), lastStepNodeStatementNode = lastStepNode.getStatementNode(), lastStepStatementNode = lastStepNodeStatementNode; ///
    return lastStepStatementNode;
}
function suppositionStatementNodesFromSubproofNode(subproofNode) {
    var suppositionNodes = subproofNode.getSuppositionNodes(), suppositionNodeStatementNodes = suppositionNodes.map(function(suppositionNode) {
        var suppositionNodeStatementNode = suppositionNode.getStatementNode();
        return suppositionNodeStatementNode;
    }), suppositionStatementNodes = suppositionNodeStatementNodes; ///
    return suppositionStatementNodes;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvc3VicHJvb2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IG5vZGVBc1N0cmluZywgbm9kZXNBc1N0cmluZyB9IGZyb20gXCIuL3N0cmluZ1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvb2ZTdHJpbmdGcm9tU3VicHJvb2ZOb2RlKHN1YnByb29mTm9kZSwgZmlsZUNvbnRleHQpIHtcbiAgY29uc3QgdG9rZW5zID0gZmlsZUNvbnRleHQuZ2V0VG9rZW5zKCksXG4gICAgICAgIHN1cHBvc2l0aW9uU3RhdGVtZW50Tm9kZXMgPSBzdXBwb3NpdGlvblN0YXRlbWVudE5vZGVzRnJvbVN1YnByb29mTm9kZShzdWJwcm9vZk5vZGUpLFxuICAgICAgICBsYXN0U3RlcFN0YXRlbWVudE5vZGUgPSBsYXN0U3RlcFN0YXRlbWVudE5vZGVGcm9tU3VicHJvb2ZOb2RlKHN1YnByb29mTm9kZSksXG4gICAgICAgIHN1cHBvc2l0aW9uU3RhdGVtZW50c1N0cmluZyA9IG5vZGVzQXNTdHJpbmcoc3VwcG9zaXRpb25TdGF0ZW1lbnROb2RlcywgdG9rZW5zKSxcbiAgICAgICAgbGFzdFN0ZXBTdGF0ZW1lbnRTdHJpbmcgPSBub2RlQXNTdHJpbmcobGFzdFN0ZXBTdGF0ZW1lbnROb2RlLCB0b2tlbnMpLFxuICAgICAgICBzdWJwcm9vZlN0cmluZyA9IGBbJHtzdXBwb3NpdGlvblN0YXRlbWVudHNTdHJpbmd9XS4uLiR7bGFzdFN0ZXBTdGF0ZW1lbnRTdHJpbmd9YDtcblxuICByZXR1cm4gc3VicHJvb2ZTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGxhc3RTdGVwU3RhdGVtZW50Tm9kZUZyb21TdWJwcm9vZk5vZGUoc3VicHJvb2ZOb2RlKSB7XG4gIGNvbnN0IGxhc3RTdGVwTm9kZSA9IHN1YnByb29mTm9kZS5nZXRMYXN0U3RlcE5vZGUoKSxcbiAgICAgICAgbGFzdFN0ZXBOb2RlU3RhdGVtZW50Tm9kZSA9IGxhc3RTdGVwTm9kZS5nZXRTdGF0ZW1lbnROb2RlKCksXG4gICAgICAgIGxhc3RTdGVwU3RhdGVtZW50Tm9kZSA9IGxhc3RTdGVwTm9kZVN0YXRlbWVudE5vZGU7ICAvLy9cblxuICByZXR1cm4gbGFzdFN0ZXBTdGF0ZW1lbnROb2RlO1xufVxuXG5mdW5jdGlvbiBzdXBwb3NpdGlvblN0YXRlbWVudE5vZGVzRnJvbVN1YnByb29mTm9kZShzdWJwcm9vZk5vZGUpIHtcbiAgY29uc3Qgc3VwcG9zaXRpb25Ob2RlcyA9IHN1YnByb29mTm9kZS5nZXRTdXBwb3NpdGlvbk5vZGVzKCksXG4gICAgICAgIHN1cHBvc2l0aW9uTm9kZVN0YXRlbWVudE5vZGVzID0gc3VwcG9zaXRpb25Ob2Rlcy5tYXAoKHN1cHBvc2l0aW9uTm9kZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN1cHBvc2l0aW9uTm9kZVN0YXRlbWVudE5vZGUgPSBzdXBwb3NpdGlvbk5vZGUuZ2V0U3RhdGVtZW50Tm9kZSgpO1xuXG4gICAgICAgICAgcmV0dXJuIHN1cHBvc2l0aW9uTm9kZVN0YXRlbWVudE5vZGU7XG4gICAgICAgIH0pLFxuICAgICAgICBzdXBwb3NpdGlvblN0YXRlbWVudE5vZGVzID0gc3VwcG9zaXRpb25Ob2RlU3RhdGVtZW50Tm9kZXM7ICAvLy9cblxuICByZXR1cm4gc3VwcG9zaXRpb25TdGF0ZW1lbnROb2Rlcztcbn1cbiJdLCJuYW1lcyI6WyJzdWJwcm9vZlN0cmluZ0Zyb21TdWJwcm9vZk5vZGUiLCJzdWJwcm9vZk5vZGUiLCJmaWxlQ29udGV4dCIsInRva2VucyIsImdldFRva2VucyIsInN1cHBvc2l0aW9uU3RhdGVtZW50Tm9kZXMiLCJzdXBwb3NpdGlvblN0YXRlbWVudE5vZGVzRnJvbVN1YnByb29mTm9kZSIsImxhc3RTdGVwU3RhdGVtZW50Tm9kZSIsImxhc3RTdGVwU3RhdGVtZW50Tm9kZUZyb21TdWJwcm9vZk5vZGUiLCJzdXBwb3NpdGlvblN0YXRlbWVudHNTdHJpbmciLCJub2Rlc0FzU3RyaW5nIiwibGFzdFN0ZXBTdGF0ZW1lbnRTdHJpbmciLCJub2RlQXNTdHJpbmciLCJzdWJwcm9vZlN0cmluZyIsImxhc3RTdGVwTm9kZSIsImdldExhc3RTdGVwTm9kZSIsImxhc3RTdGVwTm9kZVN0YXRlbWVudE5vZGUiLCJnZXRTdGF0ZW1lbnROb2RlIiwic3VwcG9zaXRpb25Ob2RlcyIsImdldFN1cHBvc2l0aW9uTm9kZXMiLCJzdXBwb3NpdGlvbk5vZGVTdGF0ZW1lbnROb2RlcyIsIm1hcCIsInN1cHBvc2l0aW9uTm9kZSIsInN1cHBvc2l0aW9uTm9kZVN0YXRlbWVudE5vZGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQUlnQkE7OztlQUFBQTs7O3NCQUY0QjtBQUVyQyxTQUFTQSwrQkFBK0JDLFlBQVksRUFBRUMsV0FBVztJQUN0RSxJQUFNQyxTQUFTRCxZQUFZRSxTQUFTLElBQzlCQyw0QkFBNEJDLDBDQUEwQ0wsZUFDdEVNLHdCQUF3QkMsc0NBQXNDUCxlQUM5RFEsOEJBQThCQyxJQUFBQSxxQkFBYSxFQUFDTCwyQkFBMkJGLFNBQ3ZFUSwwQkFBMEJDLElBQUFBLG9CQUFZLEVBQUNMLHVCQUF1QkosU0FDOURVLGlCQUFpQixBQUFDLElBQXFDRixPQUFsQ0YsNkJBQTRCLFFBQThCLE9BQXhCRTtJQUU3RCxPQUFPRTtBQUNUO0FBRUEsU0FBU0wsc0NBQXNDUCxZQUFZO0lBQ3pELElBQU1hLGVBQWViLGFBQWFjLGVBQWUsSUFDM0NDLDRCQUE0QkYsYUFBYUcsZ0JBQWdCLElBQ3pEVix3QkFBd0JTLDJCQUE0QixHQUFHO0lBRTdELE9BQU9UO0FBQ1Q7QUFFQSxTQUFTRCwwQ0FBMENMLFlBQVk7SUFDN0QsSUFBTWlCLG1CQUFtQmpCLGFBQWFrQixtQkFBbUIsSUFDbkRDLGdDQUFnQ0YsaUJBQWlCRyxHQUFHLENBQUMsU0FBQ0M7UUFDcEQsSUFBTUMsK0JBQStCRCxnQkFBZ0JMLGdCQUFnQjtRQUVyRSxPQUFPTTtJQUNULElBQ0FsQiw0QkFBNEJlLCtCQUFnQyxHQUFHO0lBRXJFLE9BQU9mO0FBQ1QifQ==