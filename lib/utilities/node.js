"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get isNodeAxiomNode () {
        return isNodeAxiomNode;
    },
    get isNodeCombinatorDeclarationNode () {
        return isNodeCombinatorDeclarationNode;
    },
    get isNodeCombinatorNode () {
        return isNodeCombinatorNode;
    },
    get isNodeComplexTypeDeclarationNode () {
        return isNodeComplexTypeDeclarationNode;
    },
    get isNodeConclusionNode () {
        return isNodeConclusionNode;
    },
    get isNodeConjectureNode () {
        return isNodeConjectureNode;
    },
    get isNodeConstructorDeclarationNode () {
        return isNodeConstructorDeclarationNode;
    },
    get isNodeConstructorNode () {
        return isNodeConstructorNode;
    },
    get isNodeContainedAssertionNode () {
        return isNodeContainedAssertionNode;
    },
    get isNodeDeclarationNode () {
        return isNodeDeclarationNode;
    },
    get isNodeDeductionNode () {
        return isNodeDeductionNode;
    },
    get isNodeDefinedAssertionNode () {
        return isNodeDefinedAssertionNode;
    },
    get isNodeDerivationNode () {
        return isNodeDerivationNode;
    },
    get isNodeEqualityNode () {
        return isNodeEqualityNode;
    },
    get isNodeErrorNode () {
        return isNodeErrorNode;
    },
    get isNodeFrameNode () {
        return isNodeFrameNode;
    },
    get isNodeJudgementNode () {
        return isNodeJudgementNode;
    },
    get isNodeLabelNode () {
        return isNodeLabelNode;
    },
    get isNodeLabelsNode () {
        return isNodeLabelsNode;
    },
    get isNodeLemmaNode () {
        return isNodeLemmaNode;
    },
    get isNodeMetaLemmaNode () {
        return isNodeMetaLemmaNode;
    },
    get isNodeMetaTypeNode () {
        return isNodeMetaTypeNode;
    },
    get isNodeMetatheoremNode () {
        return isNodeMetatheoremNode;
    },
    get isNodeMetavariableDeclarationNode () {
        return isNodeMetavariableDeclarationNode;
    },
    get isNodeMetavariableNode () {
        return isNodeMetavariableNode;
    },
    get isNodeParameterNode () {
        return isNodeParameterNode;
    },
    get isNodeParenthesisedLabelsNode () {
        return isNodeParenthesisedLabelsNode;
    },
    get isNodePremiseNode () {
        return isNodePremiseNode;
    },
    get isNodeProcedureCallNode () {
        return isNodeProcedureCallNode;
    },
    get isNodeProofNode () {
        return isNodeProofNode;
    },
    get isNodePropertyAssertionNode () {
        return isNodePropertyAssertionNode;
    },
    get isNodePropertyDeclarationNode () {
        return isNodePropertyDeclarationNode;
    },
    get isNodePropertyNode () {
        return isNodePropertyNode;
    },
    get isNodePropertyRelationNode () {
        return isNodePropertyRelationNode;
    },
    get isNodeReferenceNode () {
        return isNodeReferenceNode;
    },
    get isNodeRuleNode () {
        return isNodeRuleNode;
    },
    get isNodeSatisfiesAssertionNode () {
        return isNodeSatisfiesAssertionNode;
    },
    get isNodeStatementNode () {
        return isNodeStatementNode;
    },
    get isNodeStepNode () {
        return isNodeStepNode;
    },
    get isNodeSubDerivationNode () {
        return isNodeSubDerivationNode;
    },
    get isNodeSubproofAssertionNode () {
        return isNodeSubproofAssertionNode;
    },
    get isNodeSubproofNode () {
        return isNodeSubproofNode;
    },
    get isNodeSuppositionNode () {
        return isNodeSuppositionNode;
    },
    get isNodeTermNode () {
        return isNodeTermNode;
    },
    get isNodeTheoremNode () {
        return isNodeTheoremNode;
    },
    get isNodeTypeAssertionNode () {
        return isNodeTypeAssertionNode;
    },
    get isNodeTypeDeclarationNode () {
        return isNodeTypeDeclarationNode;
    },
    get isNodeTypeNode () {
        return isNodeTypeNode;
    },
    get isNodeTypesNode () {
        return isNodeTypesNode;
    },
    get isNodeVariableDeclarationNode () {
        return isNodeVariableDeclarationNode;
    },
    get isNodeVariableNode () {
        return isNodeVariableNode;
    },
    get statementFromStatementNode () {
        return statementFromStatementNode;
    },
    get termFromTermNode () {
        return termFromTermNode;
    },
    get typeFromTypeNode () {
        return typeFromTypeNode;
    }
});
var _dom = /*#__PURE__*/ _interop_require_default(require("../dom"));
var _type = require("../dom/type");
var _ruleNames = require("../ruleNames");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function isNodeRuleNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.RULE_RULE_NAME);
}
function isNodeStepNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.STEP_RULE_NAME);
}
function isNodeTermNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.TERM_RULE_NAME);
}
function isNodeTypeNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.TYPE_RULE_NAME);
}
function isNodeTypesNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.TYPES_RULE_NAME);
}
function isNodeLemmaNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.LEMMA_RULE_NAME);
}
function isNodeAxiomNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.AXIOM_RULE_NAME);
}
function isNodeErrorNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.ERROR_RULE_NAME);
}
function isNodeFrameNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.FRAME_RULE_NAME);
}
function isNodeProofNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROOF_RULE_NAME);
}
function isNodeLabelNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.LABEL_RULE_NAME);
}
function isNodeLabelsNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.LABELS_RULE_NAME);
}
function isNodeTheoremNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.THEOREM_RULE_NAME);
}
function isNodePremiseNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PREMISE_RULE_NAME);
}
function isNodePropertyNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROPERTY_RULE_NAME);
}
function isNodeEqualityNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.EQUALITY_RULE_NAME);
}
function isNodeVariableNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.VARIABLE_RULE_NAME);
}
function isNodeSubproofNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.SUBPROOF_RULE_NAME);
}
function isNodeMetaTypeNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.META_TYPE_RULE_NAME);
}
function isNodeParameterNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PARAMETER_RULE_NAME);
}
function isNodeDeductionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.DEDUCTION_RULE_NAME);
}
function isNodeJudgementNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.JUDGEMENT_RULE_NAME);
}
function isNodeReferenceNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.REFERENCE_RULE_NAME);
}
function isNodeStatementNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.STATEMENT_RULE_NAME);
}
function isNodeMetaLemmaNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.META_LEMMA_RULE_NAME);
}
function isNodeCombinatorNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.COMBINATOR_RULE_NAME);
}
function isNodeConclusionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.CONCLUSION_RULE_NAME);
}
function isNodeConjectureNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.CONJECTURE_RULE_NAME);
}
function isNodeDerivationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.DERIVATION_RULE_NAME);
}
function isNodeSuppositionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.SUPPOSITION_RULE_NAME);
}
function isNodeConstructorNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.CONSTRUCTOR_RULE_NAME);
}
function isNodeDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.DECLARATION_RULE_NAME);
}
function isNodeMetatheoremNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.METATHEOREM_RULE_NAME);
}
function isNodeMetavariableNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.METAVARIABLE_RULE_NAME);
}
function isNodeProcedureCallNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROCEDURE_CALL_RULE_NAME);
}
function isNodeSubDerivationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.SUB_DERIVATION_RULE_NAME);
}
function isNodeTypeAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.TYPE_ASSERTION_RULE_NAME);
}
function isNodeTypeDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.TYPE_DECLARATION_RULE_NAME);
}
function isNodePropertyRelationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROPERTY_RELATION_RULE_NAME);
}
function isNodeDefinedAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.DEFINED_ASSERTION_RULE_NAME);
}
function isNodePropertyAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROPERTY_ASSERTION_RULE_NAME);
}
function isNodeSubproofAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.SUBPROOF_ASSERTION_RULE_NAME);
}
function isNodeContainedAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.CONTAINED_ASSERTION_RULE_NAME);
}
function isNodeSatisfiesAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.SATISFIES_ASSERTION_RULE_NAME);
}
function isNodePropertyDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROPERTY_DECLARATION_RULE_NAME);
}
function isNodeVariableDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.VARIABLE_DECLARATION_RULE_NAME);
}
function isNodeParenthesisedLabelsNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PARENTHESISED_LABELS_RULE_NAME);
}
function isNodeCombinatorDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.COMBINATOR_DECLARATION_RULE_NAME);
}
function isNodeConstructorDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.CONSTRUCTOR_DECLARATION_RULE_NAME);
}
function isNodeComplexTypeDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.COMPLEX_TYPE_DECLARATION_RULE_NAME);
}
function isNodeMetavariableDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.METAVARIABLE_DECLARATION_RULE_NAME);
}
function typeFromTypeNode(typeNode) {
    var type;
    if (typeNode === null) {
        type = _type.objectType;
    } else {
        var Type = _dom.default.Type, typeName = typeNode.getTypeName(), name = typeName, string = name, superTypes = null, properties = null, provisional = null;
        type = new Type(string, name, superTypes, properties, provisional);
    }
    return type;
}
function termFromTermNode(termNode, context) {
    var Term = _dom.default.Term, node = termNode, string = context.nodeAsString(node), type = null, term = new Term(string, node, type);
    return term;
}
function statementFromStatementNode(statementNode, context) {
    var Statement = _dom.default.Statement, node = statementNode, tokens = context.nodeAsTokens(node), string = context.tokensAsString(tokens), statement = new Statement(string, node, tokens);
    return statement;
}
function isNodeRuleNodeByRuleName(node, ruleName) {
    var nodeRuleNode = false;
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, nonTerminalNodeRuleName = nonTerminalNode.getRuleName(), nonTerminalNodeRuleNameRuleName = nonTerminalNodeRuleName === ruleName;
        if (nonTerminalNodeRuleNameRuleName) {
            nodeRuleNode = true;
        }
    }
    return nodeRuleNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IGRvbSBmcm9tIFwiLi4vZG9tXCI7XG5cbmltcG9ydCB7IG9iamVjdFR5cGUgfSBmcm9tIFwiLi4vZG9tL3R5cGVcIjtcbmltcG9ydCB7IFJVTEVfUlVMRV9OQU1FLFxuICAgICAgICAgU1RFUF9SVUxFX05BTUUsXG4gICAgICAgICBURVJNX1JVTEVfTkFNRSxcbiAgICAgICAgIFRZUEVfUlVMRV9OQU1FLFxuICAgICAgICAgVFlQRVNfUlVMRV9OQU1FLFxuICAgICAgICAgTEVNTUFfUlVMRV9OQU1FLFxuICAgICAgICAgQVhJT01fUlVMRV9OQU1FLFxuICAgICAgICAgRVJST1JfUlVMRV9OQU1FLFxuICAgICAgICAgRlJBTUVfUlVMRV9OQU1FLFxuICAgICAgICAgUFJPT0ZfUlVMRV9OQU1FLFxuICAgICAgICAgTEFCRUxfUlVMRV9OQU1FLFxuICAgICAgICAgTEFCRUxTX1JVTEVfTkFNRSxcbiAgICAgICAgIFRIRU9SRU1fUlVMRV9OQU1FLFxuICAgICAgICAgUFJFTUlTRV9SVUxFX05BTUUsXG4gICAgICAgICBQUk9QRVJUWV9SVUxFX05BTUUsXG4gICAgICAgICBFUVVBTElUWV9SVUxFX05BTUUsXG4gICAgICAgICBWQVJJQUJMRV9SVUxFX05BTUUsXG4gICAgICAgICBTVUJQUk9PRl9SVUxFX05BTUUsXG4gICAgICAgICBNRVRBX1RZUEVfUlVMRV9OQU1FLFxuICAgICAgICAgUEFSQU1FVEVSX1JVTEVfTkFNRSxcbiAgICAgICAgIERFRFVDVElPTl9SVUxFX05BTUUsXG4gICAgICAgICBKVURHRU1FTlRfUlVMRV9OQU1FLFxuICAgICAgICAgUkVGRVJFTkNFX1JVTEVfTkFNRSxcbiAgICAgICAgIFNUQVRFTUVOVF9SVUxFX05BTUUsXG4gICAgICAgICBNRVRBX0xFTU1BX1JVTEVfTkFNRSxcbiAgICAgICAgIENPTUJJTkFUT1JfUlVMRV9OQU1FLFxuICAgICAgICAgQ09OQ0xVU0lPTl9SVUxFX05BTUUsXG4gICAgICAgICBDT05KRUNUVVJFX1JVTEVfTkFNRSxcbiAgICAgICAgIERFUklWQVRJT05fUlVMRV9OQU1FLFxuICAgICAgICAgU1VQUE9TSVRJT05fUlVMRV9OQU1FLFxuICAgICAgICAgQ09OU1RSVUNUT1JfUlVMRV9OQU1FLFxuICAgICAgICAgREVDTEFSQVRJT05fUlVMRV9OQU1FLFxuICAgICAgICAgTUVUQVRIRU9SRU1fUlVMRV9OQU1FLFxuICAgICAgICAgTUVUQVZBUklBQkxFX1JVTEVfTkFNRSxcbiAgICAgICAgIFBST0NFRFVSRV9DQUxMX1JVTEVfTkFNRSxcbiAgICAgICAgIFNVQl9ERVJJVkFUSU9OX1JVTEVfTkFNRSxcbiAgICAgICAgIFRZUEVfQVNTRVJUSU9OX1JVTEVfTkFNRSxcbiAgICAgICAgIFRZUEVfREVDTEFSQVRJT05fUlVMRV9OQU1FLFxuICAgICAgICAgUFJPUEVSVFlfUkVMQVRJT05fUlVMRV9OQU1FLFxuICAgICAgICAgREVGSU5FRF9BU1NFUlRJT05fUlVMRV9OQU1FLFxuICAgICAgICAgUFJPUEVSVFlfQVNTRVJUSU9OX1JVTEVfTkFNRSxcbiAgICAgICAgIFNVQlBST09GX0FTU0VSVElPTl9SVUxFX05BTUUsXG4gICAgICAgICBDT05UQUlORURfQVNTRVJUSU9OX1JVTEVfTkFNRSxcbiAgICAgICAgIFNBVElTRklFU19BU1NFUlRJT05fUlVMRV9OQU1FLFxuICAgICAgICAgUFJPUEVSVFlfREVDTEFSQVRJT05fUlVMRV9OQU1FLFxuICAgICAgICAgVkFSSUFCTEVfREVDTEFSQVRJT05fUlVMRV9OQU1FLFxuICAgICAgICAgUEFSRU5USEVTSVNFRF9MQUJFTFNfUlVMRV9OQU1FLFxuICAgICAgICAgQ09NQklOQVRPUl9ERUNMQVJBVElPTl9SVUxFX05BTUUsXG4gICAgICAgICBDT05TVFJVQ1RPUl9ERUNMQVJBVElPTl9SVUxFX05BTUUsXG4gICAgICAgICBDT01QTEVYX1RZUEVfREVDTEFSQVRJT05fUlVMRV9OQU1FLFxuICAgICAgICAgTUVUQVZBUklBQkxFX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSB9IGZyb20gXCIuLi9ydWxlTmFtZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVJ1bGVOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBSVUxFX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVN0ZXBOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBTVEVQX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVRlcm1Ob2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBURVJNX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVR5cGVOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBUWVBFX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVR5cGVzTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgVFlQRVNfUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlTGVtbWFOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBMRU1NQV9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVBeGlvbU5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIEFYSU9NX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUVycm9yTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgRVJST1JfUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlRnJhbWVOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBGUkFNRV9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVQcm9vZk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIFBST09GX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUxhYmVsTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgTEFCRUxfUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlTGFiZWxzTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgTEFCRUxTX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVRoZW9yZW1Ob2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBUSEVPUkVNX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVByZW1pc2VOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBQUkVNSVNFX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVByb3BlcnR5Tm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgUFJPUEVSVFlfUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlRXF1YWxpdHlOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBFUVVBTElUWV9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVWYXJpYWJsZU5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIFZBUklBQkxFX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVN1YnByb29mTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgU1VCUFJPT0ZfUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlTWV0YVR5cGVOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBNRVRBX1RZUEVfUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlUGFyYW1ldGVyTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgUEFSQU1FVEVSX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZURlZHVjdGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIERFRFVDVElPTl9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVKdWRnZW1lbnROb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBKVURHRU1FTlRfUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlUmVmZXJlbmNlTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgUkVGRVJFTkNFX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVN0YXRlbWVudE5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIFNUQVRFTUVOVF9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVNZXRhTGVtbWFOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBNRVRBX0xFTU1BX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUNvbWJpbmF0b3JOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBDT01CSU5BVE9SX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUNvbmNsdXNpb25Ob2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBDT05DTFVTSU9OX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUNvbmplY3R1cmVOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBDT05KRUNUVVJFX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZURlcml2YXRpb25Ob2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBERVJJVkFUSU9OX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVN1cHBvc2l0aW9uTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgU1VQUE9TSVRJT05fUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlQ29uc3RydWN0b3JOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBDT05TVFJVQ1RPUl9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVEZWNsYXJhdGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIERFQ0xBUkFUSU9OX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZU1ldGF0aGVvcmVtTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgTUVUQVRIRU9SRU1fUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlTWV0YXZhcmlhYmxlTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgTUVUQVZBUklBQkxFX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVByb2NlZHVyZUNhbGxOb2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBQUk9DRURVUkVfQ0FMTF9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVTdWJEZXJpdmF0aW9uTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgU1VCX0RFUklWQVRJT05fUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlVHlwZUFzc2VydGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIFRZUEVfQVNTRVJUSU9OX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVR5cGVEZWNsYXJhdGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIFRZUEVfREVDTEFSQVRJT05fUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlUHJvcGVydHlSZWxhdGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIFBST1BFUlRZX1JFTEFUSU9OX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZURlZmluZWRBc3NlcnRpb25Ob2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBERUZJTkVEX0FTU0VSVElPTl9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVQcm9wZXJ0eUFzc2VydGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIFBST1BFUlRZX0FTU0VSVElPTl9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVTdWJwcm9vZkFzc2VydGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIFNVQlBST09GX0FTU0VSVElPTl9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVDb250YWluZWRBc3NlcnRpb25Ob2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBDT05UQUlORURfQVNTRVJUSU9OX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVNhdGlzZmllc0Fzc2VydGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIFNBVElTRklFU19BU1NFUlRJT05fUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlUHJvcGVydHlEZWNsYXJhdGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIFBST1BFUlRZX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlKG5vZGUpIHsgcmV0dXJuIGlzTm9kZVJ1bGVOb2RlQnlSdWxlTmFtZShub2RlLCBWQVJJQUJMRV9ERUNMQVJBVElPTl9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVQYXJlbnRoZXNpc2VkTGFiZWxzTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgUEFSRU5USEVTSVNFRF9MQUJFTFNfUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlQ29tYmluYXRvckRlY2xhcmF0aW9uTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgQ09NQklOQVRPUl9ERUNMQVJBVElPTl9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVDb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZShub2RlKSB7IHJldHVybiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgQ09OU1RSVUNUT1JfREVDTEFSQVRJT05fUlVMRV9OQU1FKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlQ29tcGxleFR5cGVEZWNsYXJhdGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIENPTVBMRVhfVFlQRV9ERUNMQVJBVElPTl9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVNZXRhdmFyaWFibGVEZWNsYXJhdGlvbk5vZGUobm9kZSkgeyByZXR1cm4gaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lKG5vZGUsIE1FVEFWQVJJQUJMRV9ERUNMQVJBVElPTl9SVUxFX05BTUUpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiB0eXBlRnJvbVR5cGVOb2RlKHR5cGVOb2RlKSB7XG4gIGxldCB0eXBlO1xuXG4gIGlmICh0eXBlTm9kZSA9PT0gbnVsbCkge1xuICAgIHR5cGUgPSBvYmplY3RUeXBlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHsgVHlwZSB9ID0gZG9tLFxuICAgICAgICAgIHR5cGVOYW1lID0gdHlwZU5vZGUuZ2V0VHlwZU5hbWUoKSxcbiAgICAgICAgICBuYW1lID0gdHlwZU5hbWUsICAvLy9cbiAgICAgICAgICBzdHJpbmcgPSBuYW1lLCAgLy8vXG4gICAgICAgICAgc3VwZXJUeXBlcyA9IG51bGwsXG4gICAgICAgICAgcHJvcGVydGllcyA9IG51bGwsXG4gICAgICAgICAgcHJvdmlzaW9uYWwgPSBudWxsO1xuXG4gICAgdHlwZSA9IG5ldyBUeXBlKHN0cmluZywgbmFtZSwgc3VwZXJUeXBlcywgcHJvcGVydGllcywgcHJvdmlzaW9uYWwpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXJtRnJvbVRlcm1Ob2RlKHRlcm1Ob2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgVGVybSB9ID0gZG9tLFxuICAgICAgICBub2RlID0gdGVybU5vZGUsICAvLy9cbiAgICAgICAgc3RyaW5nID0gY29udGV4dC5ub2RlQXNTdHJpbmcobm9kZSksXG4gICAgICAgIHR5cGUgPSBudWxsLFxuICAgICAgICB0ZXJtID0gbmV3IFRlcm0oc3RyaW5nLCBub2RlLCB0eXBlKTtcblxuICByZXR1cm4gdGVybTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlbWVudEZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBTdGF0ZW1lbnQgfSA9IGRvbSxcbiAgICAgICAgbm9kZSA9IHN0YXRlbWVudE5vZGUsIC8vL1xuICAgICAgICB0b2tlbnMgPSBjb250ZXh0Lm5vZGVBc1Rva2Vucyhub2RlKSxcbiAgICAgICAgc3RyaW5nID0gY29udGV4dC50b2tlbnNBc1N0cmluZyh0b2tlbnMpLFxuICAgICAgICBzdGF0ZW1lbnQgPSBuZXcgU3RhdGVtZW50KHN0cmluZywgbm9kZSwgdG9rZW5zKTtcblxuICByZXR1cm4gc3RhdGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc05vZGVSdWxlTm9kZUJ5UnVsZU5hbWUobm9kZSwgcnVsZU5hbWUpIHtcbiAgbGV0IG5vZGVSdWxlTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBub25UZXJtaW5hbE5vZGVSdWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIG5vblRlcm1pbmFsTm9kZVJ1bGVOYW1lUnVsZU5hbWUgPSAobm9uVGVybWluYWxOb2RlUnVsZU5hbWUgPT09IHJ1bGVOYW1lKTtcblxuICAgIGlmIChub25UZXJtaW5hbE5vZGVSdWxlTmFtZVJ1bGVOYW1lKSB7XG4gICAgICBub2RlUnVsZU5vZGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub2RlUnVsZU5vZGU7XG59XG4iXSwibmFtZXMiOlsiaXNOb2RlQXhpb21Ob2RlIiwiaXNOb2RlQ29tYmluYXRvckRlY2xhcmF0aW9uTm9kZSIsImlzTm9kZUNvbWJpbmF0b3JOb2RlIiwiaXNOb2RlQ29tcGxleFR5cGVEZWNsYXJhdGlvbk5vZGUiLCJpc05vZGVDb25jbHVzaW9uTm9kZSIsImlzTm9kZUNvbmplY3R1cmVOb2RlIiwiaXNOb2RlQ29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUiLCJpc05vZGVDb25zdHJ1Y3Rvck5vZGUiLCJpc05vZGVDb250YWluZWRBc3NlcnRpb25Ob2RlIiwiaXNOb2RlRGVjbGFyYXRpb25Ob2RlIiwiaXNOb2RlRGVkdWN0aW9uTm9kZSIsImlzTm9kZURlZmluZWRBc3NlcnRpb25Ob2RlIiwiaXNOb2RlRGVyaXZhdGlvbk5vZGUiLCJpc05vZGVFcXVhbGl0eU5vZGUiLCJpc05vZGVFcnJvck5vZGUiLCJpc05vZGVGcmFtZU5vZGUiLCJpc05vZGVKdWRnZW1lbnROb2RlIiwiaXNOb2RlTGFiZWxOb2RlIiwiaXNOb2RlTGFiZWxzTm9kZSIsImlzTm9kZUxlbW1hTm9kZSIsImlzTm9kZU1ldGFMZW1tYU5vZGUiLCJpc05vZGVNZXRhVHlwZU5vZGUiLCJpc05vZGVNZXRhdGhlb3JlbU5vZGUiLCJpc05vZGVNZXRhdmFyaWFibGVEZWNsYXJhdGlvbk5vZGUiLCJpc05vZGVNZXRhdmFyaWFibGVOb2RlIiwiaXNOb2RlUGFyYW1ldGVyTm9kZSIsImlzTm9kZVBhcmVudGhlc2lzZWRMYWJlbHNOb2RlIiwiaXNOb2RlUHJlbWlzZU5vZGUiLCJpc05vZGVQcm9jZWR1cmVDYWxsTm9kZSIsImlzTm9kZVByb29mTm9kZSIsImlzTm9kZVByb3BlcnR5QXNzZXJ0aW9uTm9kZSIsImlzTm9kZVByb3BlcnR5RGVjbGFyYXRpb25Ob2RlIiwiaXNOb2RlUHJvcGVydHlOb2RlIiwiaXNOb2RlUHJvcGVydHlSZWxhdGlvbk5vZGUiLCJpc05vZGVSZWZlcmVuY2VOb2RlIiwiaXNOb2RlUnVsZU5vZGUiLCJpc05vZGVTYXRpc2ZpZXNBc3NlcnRpb25Ob2RlIiwiaXNOb2RlU3RhdGVtZW50Tm9kZSIsImlzTm9kZVN0ZXBOb2RlIiwiaXNOb2RlU3ViRGVyaXZhdGlvbk5vZGUiLCJpc05vZGVTdWJwcm9vZkFzc2VydGlvbk5vZGUiLCJpc05vZGVTdWJwcm9vZk5vZGUiLCJpc05vZGVTdXBwb3NpdGlvbk5vZGUiLCJpc05vZGVUZXJtTm9kZSIsImlzTm9kZVRoZW9yZW1Ob2RlIiwiaXNOb2RlVHlwZUFzc2VydGlvbk5vZGUiLCJpc05vZGVUeXBlRGVjbGFyYXRpb25Ob2RlIiwiaXNOb2RlVHlwZU5vZGUiLCJpc05vZGVUeXBlc05vZGUiLCJpc05vZGVWYXJpYWJsZURlY2xhcmF0aW9uTm9kZSIsImlzTm9kZVZhcmlhYmxlTm9kZSIsInN0YXRlbWVudEZyb21TdGF0ZW1lbnROb2RlIiwidGVybUZyb21UZXJtTm9kZSIsInR5cGVGcm9tVHlwZU5vZGUiLCJub2RlIiwiaXNOb2RlUnVsZU5vZGVCeVJ1bGVOYW1lIiwiUlVMRV9SVUxFX05BTUUiLCJTVEVQX1JVTEVfTkFNRSIsIlRFUk1fUlVMRV9OQU1FIiwiVFlQRV9SVUxFX05BTUUiLCJUWVBFU19SVUxFX05BTUUiLCJMRU1NQV9SVUxFX05BTUUiLCJBWElPTV9SVUxFX05BTUUiLCJFUlJPUl9SVUxFX05BTUUiLCJGUkFNRV9SVUxFX05BTUUiLCJQUk9PRl9SVUxFX05BTUUiLCJMQUJFTF9SVUxFX05BTUUiLCJMQUJFTFNfUlVMRV9OQU1FIiwiVEhFT1JFTV9SVUxFX05BTUUiLCJQUkVNSVNFX1JVTEVfTkFNRSIsIlBST1BFUlRZX1JVTEVfTkFNRSIsIkVRVUFMSVRZX1JVTEVfTkFNRSIsIlZBUklBQkxFX1JVTEVfTkFNRSIsIlNVQlBST09GX1JVTEVfTkFNRSIsIk1FVEFfVFlQRV9SVUxFX05BTUUiLCJQQVJBTUVURVJfUlVMRV9OQU1FIiwiREVEVUNUSU9OX1JVTEVfTkFNRSIsIkpVREdFTUVOVF9SVUxFX05BTUUiLCJSRUZFUkVOQ0VfUlVMRV9OQU1FIiwiU1RBVEVNRU5UX1JVTEVfTkFNRSIsIk1FVEFfTEVNTUFfUlVMRV9OQU1FIiwiQ09NQklOQVRPUl9SVUxFX05BTUUiLCJDT05DTFVTSU9OX1JVTEVfTkFNRSIsIkNPTkpFQ1RVUkVfUlVMRV9OQU1FIiwiREVSSVZBVElPTl9SVUxFX05BTUUiLCJTVVBQT1NJVElPTl9SVUxFX05BTUUiLCJDT05TVFJVQ1RPUl9SVUxFX05BTUUiLCJERUNMQVJBVElPTl9SVUxFX05BTUUiLCJNRVRBVEhFT1JFTV9SVUxFX05BTUUiLCJNRVRBVkFSSUFCTEVfUlVMRV9OQU1FIiwiUFJPQ0VEVVJFX0NBTExfUlVMRV9OQU1FIiwiU1VCX0RFUklWQVRJT05fUlVMRV9OQU1FIiwiVFlQRV9BU1NFUlRJT05fUlVMRV9OQU1FIiwiVFlQRV9ERUNMQVJBVElPTl9SVUxFX05BTUUiLCJQUk9QRVJUWV9SRUxBVElPTl9SVUxFX05BTUUiLCJERUZJTkVEX0FTU0VSVElPTl9SVUxFX05BTUUiLCJQUk9QRVJUWV9BU1NFUlRJT05fUlVMRV9OQU1FIiwiU1VCUFJPT0ZfQVNTRVJUSU9OX1JVTEVfTkFNRSIsIkNPTlRBSU5FRF9BU1NFUlRJT05fUlVMRV9OQU1FIiwiU0FUSVNGSUVTX0FTU0VSVElPTl9SVUxFX05BTUUiLCJQUk9QRVJUWV9ERUNMQVJBVElPTl9SVUxFX05BTUUiLCJWQVJJQUJMRV9ERUNMQVJBVElPTl9SVUxFX05BTUUiLCJQQVJFTlRIRVNJU0VEX0xBQkVMU19SVUxFX05BTUUiLCJDT01CSU5BVE9SX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSIsIkNPTlNUUlVDVE9SX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSIsIkNPTVBMRVhfVFlQRV9ERUNMQVJBVElPTl9SVUxFX05BTUUiLCJNRVRBVkFSSUFCTEVfREVDTEFSQVRJT05fUlVMRV9OQU1FIiwidHlwZU5vZGUiLCJ0eXBlIiwib2JqZWN0VHlwZSIsIlR5cGUiLCJkb20iLCJ0eXBlTmFtZSIsImdldFR5cGVOYW1lIiwibmFtZSIsInN0cmluZyIsInN1cGVyVHlwZXMiLCJwcm9wZXJ0aWVzIiwicHJvdmlzaW9uYWwiLCJ0ZXJtTm9kZSIsImNvbnRleHQiLCJUZXJtIiwibm9kZUFzU3RyaW5nIiwidGVybSIsInN0YXRlbWVudE5vZGUiLCJTdGF0ZW1lbnQiLCJ0b2tlbnMiLCJub2RlQXNUb2tlbnMiLCJ0b2tlbnNBc1N0cmluZyIsInN0YXRlbWVudCIsInJ1bGVOYW1lIiwibm9kZVJ1bGVOb2RlIiwibm9kZU5vblRlcm1pbmFsTm9kZSIsImlzTm9uVGVybWluYWxOb2RlIiwibm9uVGVybWluYWxOb2RlIiwibm9uVGVybWluYWxOb2RlUnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsIm5vblRlcm1pbmFsTm9kZVJ1bGVOYW1lUnVsZU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztRQXFFZ0JBO2VBQUFBOztRQWtGQUM7ZUFBQUE7O1FBNUNBQztlQUFBQTs7UUFnREFDO2VBQUFBOztRQTlDQUM7ZUFBQUE7O1FBRUFDO2VBQUFBOztRQTBDQUM7ZUFBQUE7O1FBcENBQztlQUFBQTs7UUF3QkFDO2VBQUFBOztRQXRCQUM7ZUFBQUE7O1FBdEJBQztlQUFBQTs7UUFzQ0FDO2VBQUFBOztRQXRCQUM7ZUFBQUE7O1FBMUJBQztlQUFBQTs7UUFoQkFDO2VBQUFBOztRQUVBQztlQUFBQTs7UUEwQkFDO2VBQUFBOztRQXRCQUM7ZUFBQUE7O1FBRUFDO2VBQUFBOztRQVpBQztlQUFBQTs7UUFzQ0FDO2VBQUFBOztRQVpBQztlQUFBQTs7UUE0QkFDO2VBQUFBOztRQW9DQUM7ZUFBQUE7O1FBbENBQztlQUFBQTs7UUE1QkFDO2VBQUFBOztRQXNEQUM7ZUFBQUE7O1FBbEVBQztlQUFBQTs7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