"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get isNodeAxiomNode () {
        return isNodeAxiomNode;
    },
    get isNodeCombinatorDeclarationNode () {
        return isNodeCombinatorDeclarationNode;
    },
    get isNodeCombinatorNode () {
        return isNodeCombinatorNode;
    },
    get isNodeComplexTypeDeclarationNode () {
        return isNodeComplexTypeDeclarationNode;
    },
    get isNodeConclusionNode () {
        return isNodeConclusionNode;
    },
    get isNodeConjectureNode () {
        return isNodeConjectureNode;
    },
    get isNodeConstructorDeclarationNode () {
        return isNodeConstructorDeclarationNode;
    },
    get isNodeConstructorNode () {
        return isNodeConstructorNode;
    },
    get isNodeContainedAssertionNode () {
        return isNodeContainedAssertionNode;
    },
    get isNodeDeclarationNode () {
        return isNodeDeclarationNode;
    },
    get isNodeDeductionNode () {
        return isNodeDeductionNode;
    },
    get isNodeDefinedAssertionNode () {
        return isNodeDefinedAssertionNode;
    },
    get isNodeDerivationNode () {
        return isNodeDerivationNode;
    },
    get isNodeEqualityNode () {
        return isNodeEqualityNode;
    },
    get isNodeErrorNode () {
        return isNodeErrorNode;
    },
    get isNodeFrameNode () {
        return isNodeFrameNode;
    },
    get isNodeJudgementNode () {
        return isNodeJudgementNode;
    },
    get isNodeLabelNode () {
        return isNodeLabelNode;
    },
    get isNodeLemmaNode () {
        return isNodeLemmaNode;
    },
    get isNodeMetaLemmaNode () {
        return isNodeMetaLemmaNode;
    },
    get isNodeMetaTypeNode () {
        return isNodeMetaTypeNode;
    },
    get isNodeMetatheoremNode () {
        return isNodeMetatheoremNode;
    },
    get isNodeMetavariableDeclarationNode () {
        return isNodeMetavariableDeclarationNode;
    },
    get isNodeMetavariableNode () {
        return isNodeMetavariableNode;
    },
    get isNodeParameterNode () {
        return isNodeParameterNode;
    },
    get isNodePremiseNode () {
        return isNodePremiseNode;
    },
    get isNodeProcedureCallNode () {
        return isNodeProcedureCallNode;
    },
    get isNodeProofNode () {
        return isNodeProofNode;
    },
    get isNodePropertyAssertionNode () {
        return isNodePropertyAssertionNode;
    },
    get isNodePropertyDeclarationNode () {
        return isNodePropertyDeclarationNode;
    },
    get isNodePropertyNode () {
        return isNodePropertyNode;
    },
    get isNodePropertyRelationNode () {
        return isNodePropertyRelationNode;
    },
    get isNodeReferenceNode () {
        return isNodeReferenceNode;
    },
    get isNodeRuleNode () {
        return isNodeRuleNode;
    },
    get isNodeSatisfiesAssertionNode () {
        return isNodeSatisfiesAssertionNode;
    },
    get isNodeStatementNode () {
        return isNodeStatementNode;
    },
    get isNodeStepNode () {
        return isNodeStepNode;
    },
    get isNodeSubDerivationNode () {
        return isNodeSubDerivationNode;
    },
    get isNodeSubproofAssertionNode () {
        return isNodeSubproofAssertionNode;
    },
    get isNodeSubproofNode () {
        return isNodeSubproofNode;
    },
    get isNodeSuppositionNode () {
        return isNodeSuppositionNode;
    },
    get isNodeTermNode () {
        return isNodeTermNode;
    },
    get isNodeTheoremNode () {
        return isNodeTheoremNode;
    },
    get isNodeTypeAssertionNode () {
        return isNodeTypeAssertionNode;
    },
    get isNodeTypeDeclarationNode () {
        return isNodeTypeDeclarationNode;
    },
    get isNodeTypeNode () {
        return isNodeTypeNode;
    },
    get isNodeVariableDeclarationNode () {
        return isNodeVariableDeclarationNode;
    },
    get isNodeVariableNode () {
        return isNodeVariableNode;
    },
    get statementFromStatementNode () {
        return statementFromStatementNode;
    },
    get termFromTermNode () {
        return termFromTermNode;
    },
    get typeFromTypeNode () {
        return typeFromTypeNode;
    }
});
var _dom = /*#__PURE__*/ _interop_require_default(require("../dom"));
var _type = require("../dom/type");
var _ruleNames = require("../ruleNames");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function isNodeRuleNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.RULE_RULE_NAME);
}
function isNodeStepNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.STEP_RULE_NAME);
}
function isNodeTermNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.TERM_RULE_NAME);
}
function isNodeTypeNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.TYPE_RULE_NAME);
}
function isNodeLabelNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.LABEL_RULE_NAME);
}
function isNodeLemmaNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.LEMMA_RULE_NAME);
}
function isNodeAxiomNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.AXIOM_RULE_NAME);
}
function isNodeErrorNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.ERROR_RULE_NAME);
}
function isNodeFrameNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.FRAME_RULE_NAME);
}
function isNodeProofNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROOF_RULE_NAME);
}
function isNodeTheoremNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.THEOREM_RULE_NAME);
}
function isNodePremiseNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PREMISE_RULE_NAME);
}
function isNodePropertyNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROPERTY_RULE_NAME);
}
function isNodeEqualityNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.EQUALITY_RULE_NAME);
}
function isNodeVariableNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.VARIABLE_RULE_NAME);
}
function isNodeSubproofNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.SUBPROOF_RULE_NAME);
}
function isNodeMetaTypeNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.META_TYPE_RULE_NAME);
}
function isNodeParameterNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PARAMETER_RULE_NAME);
}
function isNodeDeductionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.DEDUCTION_RULE_NAME);
}
function isNodeJudgementNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.JUDGEMENT_RULE_NAME);
}
function isNodeReferenceNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.REFERENCE_RULE_NAME);
}
function isNodeStatementNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.STATEMENT_RULE_NAME);
}
function isNodeMetaLemmaNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.META_LEMMA_RULE_NAME);
}
function isNodeCombinatorNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.COMBINATOR_RULE_NAME);
}
function isNodeConclusionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.CONCLUSION_RULE_NAME);
}
function isNodeConjectureNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.CONJECTURE_RULE_NAME);
}
function isNodeDerivationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.DERIVATION_RULE_NAME);
}
function isNodeSuppositionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.SUPPOSITION_RULE_NAME);
}
function isNodeConstructorNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.CONSTRUCTOR_RULE_NAME);
}
function isNodeDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.DECLARATION_RULE_NAME);
}
function isNodeMetatheoremNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.METATHEOREM_RULE_NAME);
}
function isNodeMetavariableNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.METAVARIABLE_RULE_NAME);
}
function isNodeProcedureCallNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROCEDURE_CALL_RULE_NAME);
}
function isNodeSubDerivationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.SUB_DERIVATION_RULE_NAME);
}
function isNodeTypeAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.TYPE_ASSERTION_RULE_NAME);
}
function isNodeTypeDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.TYPE_DECLARATION_RULE_NAME);
}
function isNodePropertyRelationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROPERTY_RELATION_RULE_NAME);
}
function isNodeDefinedAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.DEFINED_ASSERTION_RULE_NAME);
}
function isNodePropertyAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROPERTY_ASSERTION_RULE_NAME);
}
function isNodeSubproofAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.SUBPROOF_ASSERTION_RULE_NAME);
}
function isNodeContainedAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.CONTAINED_ASSERTION_RULE_NAME);
}
function isNodeSatisfiesAssertionNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.SATISFIES_ASSERTION_RULE_NAME);
}
function isNodePropertyDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.PROPERTY_DECLARATION_RULE_NAME);
}
function isNodeVariableDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.VARIABLE_DECLARATION_RULE_NAME);
}
function isNodeCombinatorDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.COMBINATOR_DECLARATION_RULE_NAME);
}
function isNodeConstructorDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.CONSTRUCTOR_DECLARATION_RULE_NAME);
}
function isNodeComplexTypeDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.COMPLEX_TYPE_DECLARATION_RULE_NAME);
}
function isNodeMetavariableDeclarationNode(node) {
    return isNodeRuleNodeByRuleName(node, _ruleNames.METAVARIABLE_DECLARATION_RULE_NAME);
}
function typeFromTypeNode(typeNode) {
    var type;
    if (typeNode === null) {
        type = _type.objectType;
    } else {
        var Type = _dom.default.Type, typeName = typeNode.getTypeName(), name = typeName, string = name, superTypes = null, properties = null, provisional = null;
        type = new Type(string, name, superTypes, properties, provisional);
    }
    return type;
}
function termFromTermNode(termNode, context) {
    var Term = _dom.default.Term, node = termNode, string = context.nodeAsString(node), type = null, term = new Term(string, node, type);
    return term;
}
function statementFromStatementNode(statementNode, context) {
    var Statement = _dom.default.Statement, node = statementNode, tokens = context.nodeAsTokens(node), string = context.tokensAsString(tokens), statement = new Statement(string, node, tokens);
    return statement;
}
function isNodeRuleNodeByRuleName(node, ruleName) {
    var nodeRuleNode = false;
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, nonTerminalNodeRuleName = nonTerminalNode.getRuleName(), nonTerminalNodeRuleNameRuleName = nonTerminalNodeRuleName === ruleName;
        if (nonTerminalNodeRuleNameRuleName) {
            nodeRuleNode = true;
        }
    }
    return nodeRuleNode;
}

//# sourceMappingURL=data:application/json;base64,