"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get combinedCustomGrammarFromNothing () {
        return combinedCustomGrammarFromNothing;
    },
    get combinedCustomGrammarFromReleaseContexts () {
        return combinedCustomGrammarFromReleaseContexts;
    },
    get customGrammarFromNameAndEntries () {
        return customGrammarFromNameAndEntries;
    },
    get default () {
        return _default;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
function customGrammarFromNameAndEntries(name, entries) {
    var termBNF = entries.getTermBNF(), statementBNF = entries.getStatementBNF(), typeVocabulary = entries.getTypeVocabulary(), symbolVocabulary = entries.getSymbolVocabulary(), customGrammar = _occamcustomgrammars.CustomGrammar.fromNameTermBNFStatementBNFTypeVocabularyAndSymbolVocabulary(name, termBNF, statementBNF, typeVocabulary, symbolVocabulary);
    return customGrammar;
}
function combinedCustomGrammarFromNothing() {
    var customGrammars = [], combinedCustomGrammar = _occamcustomgrammars.CombinedCustomGrammar.fromCustomGrammars(customGrammars);
    return combinedCustomGrammar;
}
function combinedCustomGrammarFromReleaseContexts(releaseContexts) {
    var customGrammars = releaseContexts.map(function(releaseContext) {
        var customGrammar = releaseContext.getCustomGrammar();
        return customGrammar;
    });
    customGrammars.reverse(); ///
    var combinedCustomGrammar = _occamcustomgrammars.CombinedCustomGrammar.fromCustomGrammars(customGrammars);
    return combinedCustomGrammar;
}
var _default = {
    customGrammarFromNameAndEntries: customGrammarFromNameAndEntries,
    combinedCustomGrammarFromNothing: combinedCustomGrammarFromNothing,
    combinedCustomGrammarFromReleaseContexts: combinedCustomGrammarFromReleaseContexts
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY3VzdG9tR3JhbW1hci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQ3VzdG9tR3JhbW1hciwgQ29tYmluZWRDdXN0b21HcmFtbWFyIH0gZnJvbSBcIm9jY2FtLWN1c3RvbS1ncmFtbWFyc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tR3JhbW1hckZyb21OYW1lQW5kRW50cmllcyhuYW1lLCBlbnRyaWVzKSB7XG4gIGNvbnN0IHRlcm1CTkYgPSBlbnRyaWVzLmdldFRlcm1CTkYoKSxcbiAgICAgICAgc3RhdGVtZW50Qk5GID0gZW50cmllcy5nZXRTdGF0ZW1lbnRCTkYoKSxcbiAgICAgICAgdHlwZVZvY2FidWxhcnkgPSBlbnRyaWVzLmdldFR5cGVWb2NhYnVsYXJ5KCksXG4gICAgICAgIHN5bWJvbFZvY2FidWxhcnkgPSBlbnRyaWVzLmdldFN5bWJvbFZvY2FidWxhcnkoKSxcbiAgICAgICAgY3VzdG9tR3JhbW1hciA9IEN1c3RvbUdyYW1tYXIuZnJvbU5hbWVUZXJtQk5GU3RhdGVtZW50Qk5GVHlwZVZvY2FidWxhcnlBbmRTeW1ib2xWb2NhYnVsYXJ5KG5hbWUsIHRlcm1CTkYsIHN0YXRlbWVudEJORiwgdHlwZVZvY2FidWxhcnksIHN5bWJvbFZvY2FidWxhcnkpO1xuXG4gIHJldHVybiBjdXN0b21HcmFtbWFyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcoKSB7XG4gIGNvbnN0IGN1c3RvbUdyYW1tYXJzID0gW10sXG4gICAgICAgIGNvbWJpbmVkQ3VzdG9tR3JhbW1hciA9IENvbWJpbmVkQ3VzdG9tR3JhbW1hci5mcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpO1xuXG4gIHJldHVybiBjb21iaW5lZEN1c3RvbUdyYW1tYXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tUmVsZWFzZUNvbnRleHRzKHJlbGVhc2VDb250ZXh0cykge1xuICBjb25zdCBjdXN0b21HcmFtbWFycyA9IHJlbGVhc2VDb250ZXh0cy5tYXAoKHJlbGVhc2VDb250ZXh0KSA9PiB7XG4gICAgICAgICAgY29uc3QgY3VzdG9tR3JhbW1hciA9IHJlbGVhc2VDb250ZXh0LmdldEN1c3RvbUdyYW1tYXIoKTtcblxuICAgICAgICAgIHJldHVybiBjdXN0b21HcmFtbWFyO1xuICAgICAgICB9KTtcblxuICBjdXN0b21HcmFtbWFycy5yZXZlcnNlKCk7IC8vL1xuXG4gIGNvbnN0IGNvbWJpbmVkQ3VzdG9tR3JhbW1hciA9IENvbWJpbmVkQ3VzdG9tR3JhbW1hci5mcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpO1xuXG4gIHJldHVybiBjb21iaW5lZEN1c3RvbUdyYW1tYXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY3VzdG9tR3JhbW1hckZyb21OYW1lQW5kRW50cmllcyxcbiAgY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcsXG4gIGNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21SZWxlYXNlQ29udGV4dHNcbn07XG4iXSwibmFtZXMiOlsiY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmciLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tUmVsZWFzZUNvbnRleHRzIiwiY3VzdG9tR3JhbW1hckZyb21OYW1lQW5kRW50cmllcyIsIm5hbWUiLCJlbnRyaWVzIiwidGVybUJORiIsImdldFRlcm1CTkYiLCJzdGF0ZW1lbnRCTkYiLCJnZXRTdGF0ZW1lbnRCTkYiLCJ0eXBlVm9jYWJ1bGFyeSIsImdldFR5cGVWb2NhYnVsYXJ5Iiwic3ltYm9sVm9jYWJ1bGFyeSIsImdldFN5bWJvbFZvY2FidWxhcnkiLCJjdXN0b21HcmFtbWFyIiwiQ3VzdG9tR3JhbW1hciIsImZyb21OYW1lVGVybUJORlN0YXRlbWVudEJORlR5cGVWb2NhYnVsYXJ5QW5kU3ltYm9sVm9jYWJ1bGFyeSIsImN1c3RvbUdyYW1tYXJzIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiQ29tYmluZWRDdXN0b21HcmFtbWFyIiwiZnJvbUN1c3RvbUdyYW1tYXJzIiwicmVsZWFzZUNvbnRleHRzIiwibWFwIiwicmVsZWFzZUNvbnRleHQiLCJnZXRDdXN0b21HcmFtbWFyIiwicmV2ZXJzZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O1FBY2dCQTtlQUFBQTs7UUFPQUM7ZUFBQUE7O1FBakJBQztlQUFBQTs7UUErQmhCO2VBQUE7OzttQ0FqQ3FEO0FBRTlDLFNBQVNBLGdDQUFnQ0MsSUFBSSxFQUFFQyxPQUFPO0lBQzNELElBQU1DLFVBQVVELFFBQVFFLFVBQVUsSUFDNUJDLGVBQWVILFFBQVFJLGVBQWUsSUFDdENDLGlCQUFpQkwsUUFBUU0saUJBQWlCLElBQzFDQyxtQkFBbUJQLFFBQVFRLG1CQUFtQixJQUM5Q0MsZ0JBQWdCQyxrQ0FBYSxDQUFDQyw0REFBNEQsQ0FBQ1osTUFBTUUsU0FBU0UsY0FBY0UsZ0JBQWdCRTtJQUU5SSxPQUFPRTtBQUNUO0FBRU8sU0FBU2I7SUFDZCxJQUFNZ0IsaUJBQWlCLEVBQUUsRUFDbkJDLHdCQUF3QkMsMENBQXFCLENBQUNDLGtCQUFrQixDQUFDSDtJQUV2RSxPQUFPQztBQUNUO0FBRU8sU0FBU2hCLHlDQUF5Q21CLGVBQWU7SUFDdEUsSUFBTUosaUJBQWlCSSxnQkFBZ0JDLEdBQUcsQ0FBQyxTQUFDQztRQUNwQyxJQUFNVCxnQkFBZ0JTLGVBQWVDLGdCQUFnQjtRQUVyRCxPQUFPVjtJQUNUO0lBRU5HLGVBQWVRLE9BQU8sSUFBSSxHQUFHO0lBRTdCLElBQU1QLHdCQUF3QkMsMENBQXFCLENBQUNDLGtCQUFrQixDQUFDSDtJQUV2RSxPQUFPQztBQUNUO0lBRUEsV0FBZTtJQUNiZixpQ0FBQUE7SUFDQUYsa0NBQUFBO0lBQ0FDLDBDQUFBQTtBQUNGIn0=